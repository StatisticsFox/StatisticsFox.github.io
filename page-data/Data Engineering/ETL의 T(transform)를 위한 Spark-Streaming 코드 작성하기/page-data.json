{"componentChunkName":"component---src-templates-blog-template-js","path":"/Data Engineering/ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기/","result":{"data":{"cur":{"id":"86485b27-e91e-508b-8973-c55fb988ce08","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서..</h2>\n<p>요새는 학교 과제를 위한 따릉이 대시보드가 아닌 한이음 ICT 공모전을 위한 따릉이 실시간 대시보드 구축을 진행중이다. 원래는 카프카로 데이터를 producing 하자마자 스피드레이어를 구축해서 대시보드에 마이크로 배치 형태로 실시간 대시보드를 구축했다면 이번에는 대시보드를 더 고도화하기 위해 Spark를 이용해 한번 형태 변환을 하고 S3에 적제하는 과정을 거져봤다.</p>\n<p>즉, 아키텍쳐의 변화가 다음과 같다.</p>\n<h4 id=\"이전-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"이전 아키텍쳐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전 아키텍쳐</h4>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/UQOSHPiMvlbtIICdzgAAAAAAALbDIYVRTxIVsFE?width=2400&amp;height=868\" alt=\"아키텍쳐\">\n</div>\n<h4 id=\"변경-후-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD-%ED%9B%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"변경 후 아키텍쳐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경 후 아키텍쳐</h4>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNJRKls7yGMSJpXC5w6SHexAcdcMmCo1u9rPOT7osYAtOQ?width=2918&amp;height=1186\" alt=\"아키텍쳐\">\n</div>\n<p>좀 많이 힘써봤다. 단순하게 실시간 모니터링만 하는 대시보드는 식상하기도 하고 솔직히 요즘 같이 Chatgpt가 발달한 시대에 그 정도 못만드는 사람 없을 것이다. 다만 이렇게 클라우안에서 다양한 툴과 함께 서비스를 제작한다는 것은 또 다른 개념이라 그 의미가 크다. 나는 위 아키텍쳐에서 <font color=\"#c00000\">카프카로부터 데이터를 실시간으로 받아 SPARK에서 변환 후 S3에 실시간으로 적제하는 Spark-Streaming 코드</font>를 이번에 작성해봤다.<del>(사실 아직 개발 중!)</del> <br>\n그럼 이제 시작해보자</p>\n<div align=\"center\">\n    <img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&amp;authkey=%21AInaQqp_g1hhKd0&amp;width=564&amp;height=311\" alt=\"시작해보자\">\n</div>\n<h2 id=\"sql-vs-dataframeapi-vs-무지성-코딩\" style=\"position:relative;\"><a href=\"#sql-vs-dataframeapi-vs-%EB%AC%B4%EC%A7%80%EC%84%B1-%EC%BD%94%EB%94%A9\" aria-label=\"sql vs dataframeapi vs 무지성 코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL VS DataframeAPI VS 무지성 코딩</h2>\n<p>자 SPARK를 파이썬으로 작성할 경우 많은 선택지가 있으니… 바로 spark_sql 혹은 dataframe_api 둘 중 무었을 쓸지다.<a href=\"https://statisticsfox.notion.site/Spark-RDD-DataFrame-SQL-77b20bc7a90d4c709a002ad75542b396?pvs=4\">(이 둘 간의 비교는 이미 노션에 정리 함. 참고!)</a>\n<br></p>\n<p>무지성 코딩은 그럼 왜 넣었냐! 내가 처음에 무지성으로 코딩을 했었다. 바로 collect()함수로만 모든 집계를 처리한것이다.😱😱 그럼 절대 안된다.</p>\n<blockquote>\n<p>spark에는 Driver와 excutor가 있는데 다음과 같은 역할을 함. <br></p>\n<ul>\n<li>driver: 일감(TASK)이 들어오면 excuter에게 일감을 던져준다. <br></li>\n<li>excuter: 들어온 일을 처리하고 일한 결과를 driver에게 반환하는 역할을 한다.</li>\n</ul>\n</blockquote>\n<p>근데 collect()함수로만 모든 집계를 처리한다는 것은 driver가 모든 일을 다하도록 코딩한다는 뜻이다. 즉, 사장님이 알바 뽑았는데 알바 놔두고 자기 혼자 일 다하는 꼴이다.💀 이러면 병렬 연산의 장점도 없을 뿐더러 SPARK의 장점들이 아무짝에도 쓸모 없어져 버린다.<del>(근데 본인은 초반에 아런 멍청한 짓을 저지름ㅋㅅㅋ)</del> <br></p>\n<p>그래서 우리는 SQL엔진 혹은 Dataframe api를 활용해서 데이터를 집계 해야한다. 또한 이 둘을 사용하면 카탈리스트 옵티마이저라고 Spark 내에서 최적화 및 계획을 수립해 주기에 최선의 결과와 속도를 얻을 수 있다. 자세한 내용은 위 링크를 참고하자.</p>\n<h2 id=\"그렇게-선정된-sql\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EA%B2%8C-%EC%84%A0%EC%A0%95%EB%90%9C-sql\" aria-label=\"그렇게 선정된 sql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇게 선정된 SQL</h2>\n<p>나는  Spark SQL을 사용하기로 했다. 사실 나는 SQL 보다는 DataFrameAPI를 더 선호한다. 그 이유는 다음과 같다.</p>\n<ol>\n<li>DataFrame api는 오류가 났을 경우 컴파일 하기 용이하다.</li>\n<li>현재 변환하려고 하는 형식은 크게 복잡한 구조가 아니기에 엄청 간단하게 질의할 수 있다. <br></li>\n<li>SQL은 쿼리를 짜도 에러가 나면 그냥 쿼리에 문제가 있다고 알려주지 쿼리 어디서 문제가 있는지 알려주지 않는다.</li>\n</ol>\n<p>정도 되시겠다. 내가 Spark에서 쿼리를 기이이일게 짰을때 오류가 나면 “그냥 쿼리에 오류가 있다.”정도만 표시 되기에 쿼리가 길면 컴파일이 어려워진다. 다만 데이터 프레임은 어디서 오류가 났는지 컴파일이 비교적 명확하고 그렇기에 테스크 별로 모듈화하기가 엄청 좋다. <br>\n다만 이번에는 나는 1시간 단위로 집계를 해야 한다. SQL에는 window라는 기능이 있는데 이를 1hour로 설정해주면 내가 수동으로 비교해주지 않아도 자기내들 알아서 1시간 단위로 데이터를 집계해 준다.</p>\n<h2 id=\"코드를-살펴보자\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\" aria-label=\"코드를 살펴보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드를 살펴보자</h2>\n<h3 id=\"무지성-코딩\" style=\"position:relative;\"><a href=\"#%EB%AC%B4%EC%A7%80%EC%84%B1-%EC%BD%94%EB%94%A9\" aria-label=\"무지성 코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>무지성 코딩</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update_state</span><span class=\"token punctuation\">(</span>batch_df<span class=\"token punctuation\">,</span> batch_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> state<span class=\"token punctuation\">,</span> current_hour<span class=\"token punctuation\">,</span> batch_accumulator\n\n    now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>minute<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> microsecond<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> current_hour <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        current_hour <span class=\"token operator\">=</span> now\n\n    <span class=\"token comment\"># 새로운 시간 창에 들어서면 이전 데이터 집계 및 초기화</span>\n    <span class=\"token keyword\">if</span> now <span class=\"token operator\">!=</span> current_hour<span class=\"token punctuation\">:</span>\n    \n        <span class=\"token keyword\">if</span> batch_accumulator<span class=\"token punctuation\">:</span>\n            result_df <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>createDataFrame<span class=\"token punctuation\">(</span>batch_accumulator<span class=\"token punctuation\">,</span> schema<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"event_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            hourly_summary <span class=\"token operator\">=</span> result_df<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span>\n                F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_return\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span><span class=\"token string\">\"hour\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>lit<span class=\"token punctuation\">(</span>current_hour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            previous_hour <span class=\"token operator\">=</span> current_hour <span class=\"token operator\">-</span> timedelta<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n            year <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y'</span><span class=\"token punctuation\">)</span>\n            month <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%m'</span><span class=\"token punctuation\">)</span>\n            day <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%d'</span><span class=\"token punctuation\">)</span>\n            hour <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%H'</span><span class=\"token punctuation\">)</span>\n\n            bucket_name <span class=\"token operator\">=</span> <span class=\"token string\">'ddareungidatabucket'</span>\n            folder_name <span class=\"token operator\">=</span> <span class=\"token string\">'hourly_summary'</span>\n            path <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"s3a://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>folder_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>year<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>month<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>day<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>hour<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n            hourly_summary<span class=\"token punctuation\">.</span>repartition<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"overwrite\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parquet<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\n            hourly_summary<span class=\"token punctuation\">.</span>orderBy<span class=\"token punctuation\">(</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            batch_accumulator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        current_hour <span class=\"token operator\">=</span> now\n\n    batch_data <span class=\"token operator\">=</span> batch_df<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\n    changes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> batch_data<span class=\"token punctuation\">:</span>\n        station_id <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>stationId\n        current_count <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>parkingBikeTotCnt\n        event_time <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>event_time\n\n        <span class=\"token keyword\">if</span> station_id <span class=\"token keyword\">in</span> state<span class=\"token punctuation\">:</span>\n            previous_count <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>station_id<span class=\"token punctuation\">]</span>\n            change <span class=\"token operator\">=</span> current_count <span class=\"token operator\">-</span> previous_count\n            <span class=\"token keyword\">if</span> change <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                batch_accumulator<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">elif</span> change <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>change<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                batch_accumulator<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>change<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            batch_accumulator<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        state<span class=\"token punctuation\">[</span>station_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current_count\n\n\n    <span class=\"token keyword\">if</span> changes<span class=\"token punctuation\">:</span>\n        result_df <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>createDataFrame<span class=\"token punctuation\">(</span>changes<span class=\"token punctuation\">,</span> schema<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"event_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        result_df<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위에는 내가 무지성으로 코딩한 코드다 무지성으로 했다는 뜻은 그냥 기능에 충실하게 <font color=\"#c00000\">확장성 고려하지 않고 내가 아는 파이썬 코드대로 짰다는 뜻</font>이다.(<del>대충 의식의 흐름대로 짰다는 것</del>) 지금 보면 1시간마다 데이터를 쌓아뒀다가 집계를 해야하기 때문에 상태 데이터를 전역변수로 설정해두고 시간창 즉 시간이 변경되지 않으면 계속해서 데이터를 업데이트 시간이 변경되면 한시간이 지났다는 의미이므로 데이터 집계 및 전송 및 상태창 초기화 를 하고 있다.</p>\n<p>근데 자 여기서 보자 지금 보면 데이터를 변환하기 위해 데이터를 읽어 들이는 부분이 아래 코드처럼 묶여있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">batch_data <span class=\"token operator\">=</span> batch_df<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>아까 말했듯이 이는 데이터를 드라이버 노드로 수집하는 것으로 기껏 구축한 Spark의 최장점인 병렬처리의 이점을 쓰레기통에 박아넣은 행위다.</p>\n<p>그래서 코드를 for문과 if문으로만 짜둔 이름하여 더러운 코드가 완성이 되었다.</p>\n<h3 id=\"spark_sql\" style=\"position:relative;\"><a href=\"#spark_sql\" aria-label=\"spark_sql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spark_SQL</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update_state</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> batch_df<span class=\"token punctuation\">,</span> batch_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>minute<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> microsecond<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        joined_df <span class=\"token operator\">=</span> batch_df<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>state_df<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">\"left\"</span><span class=\"token punctuation\">)</span>\n\n        changes_df <span class=\"token operator\">=</span> joined_df<span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>coalesce<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>lit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        new_state_df <span class=\"token operator\">=</span> changes_df<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>\n            F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>state_df <span class=\"token operator\">=</span> new_state_df\n\n        hourly_summary <span class=\"token operator\">=</span> changes_df<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>\n            F<span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">(</span><span class=\"token string\">\"event_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1 hour\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stationId\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span>\n            F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_return\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"window.start\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"window.end\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"total_rental\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"total_return\"</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> hourly_summary</code></pre></div>\n<p>너무나도 깔끔(?)해진 코드를 볼 수 있다. 먼저 바뀐점을 알아보자. 처음에 배치 데이터와 기존 상태 데이터를 leftjoin 하는데 우선 초기에 조인 시 오류를 방지하기 위해 <code class=\"language-text\">previous_parkingBikeTotCnt</code>가 0인 경우 <code class=\"language-text\">change</code>, <code class=\"language-text\">return</code>, <code class=\"language-text\">rental</code> 값을 0으로 설정해준다.  <br><br> 그리고 <code class=\"language-text\">parkingBikeTotCnt</code> - <code class=\"language-text\">previous_parkingBikeTotCnt</code> = <code class=\"language-text\">change</code>로 둔 뒤에 change 값이 양수이면 return에 change 값이 음수이면 rental에 저장 하고 그 이외는 0으로 저장한다.\n<br><br> 그렇게 데이터가 들어올때 마다 이런 연산이 반복되고 1시간이라는 window 즉 시간창이 지나게 되면 <code class=\"language-text\">groupBy</code>연산이 실행되면서 아래와 같은 한시간 집계 분에 해당하는 데이터 프레임이 완성된다.</p>\n<table>\n<thead>\n<tr>\n<th>window.start</th>\n<th>window.end</th>\n<th>stationId</th>\n<th>total_rental</th>\n<th>total_return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station1</td>\n<td>20</td>\n<td>23</td>\n</tr>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station2</td>\n<td>3</td>\n<td>6</td>\n</tr>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station3</td>\n<td>12</td>\n<td>9</td>\n</tr>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station4</td>\n<td>8</td>\n<td>7</td>\n</tr>\n</tbody>\n</table>\n<p>그리고 이제 해당 적제 결과를 S3 양동이에 차곡차곡 담아주면 된다.\n세부적인 코드는 아래에서 확인하자.ㅎㅎ\n<a href=\"https://github.com/StatisticsFox/Ddareungi-Spark\">https://github.com/StatisticsFox/Ddareungi-Spark</a></p>\n<h2 id=\"마무리하며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0\" aria-label=\"마무리하며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리하며</h2>\n<p>사실 Spark의 개념에 대해서는 알고 있었다. 근데 이게 코드를 짤때 어떤 영향을 미치는지는 몰랐다. Spark는 어떤거로 구성되어 있는지 특성은 뭔지 등을 알고 있었는데 이렇게 코드를 직접 짜는 과정에서 알고 있는 내용을 코드에 녹여내는건 확실히 프로젝트를 해보면서 몸으로 익혀야 하는 것 같다. 일단 현재는 30초마다 카프카에서 불러오고 있는데 점차 10초 5초로 줄이는 과정에서 메모리가 얼마나 부족해지는지 그럴 경우 얼마나 무엇을 더 최적화해야 하는지 등을 프로젝트를 마무리해 가면서 확인해볼 예정이다. 그때 다시 글로 돌아오겠따!!</p>","excerpt":"들어가기에 앞서.. 요새는 학교 과제를 위한 따릉이 대시보드가 아닌 한이음 ICT 공모전을 위한 따릉이 실시간 대시보드 구축을 진행중이다. 원래는 카프카로 데이터를 producing 하자마자 스피드레이어를 구축해서 대시보드에 마이크로 배치 형태로 실시간 대시보드를 구축했다면 이번에는 대시보드를 더 고도화하기 위해 Spark를 이용해 한번 형태 변환을 하고 S3에 적제하는 과정을 거져봤다. 즉, 아키텍쳐의 변화가 다음과 같다. 이전 아키텍쳐 변경 후 아키텍쳐 좀 많이 힘써봤다. 단순하게 실시간 모니터링만 하는 대시보드는 식상하기도 하고 솔직히 요즘 같이 Chatgpt가 발달한 시대에 그 정도 못만드는 사람 없을 것이다. 다만 이렇게 클라우안에서 다양한 툴과 함께 서비스를 제작한다는 것은 또 다른 개념이라 그 의미가 크다. 나는 위 아키텍쳐에서 카프카로부터 데이터를 실시간으로 받아 SPARK에서 변환 후 S3에 실시간으로 적제하는 Spark-Streaming 코드를 이번에 작성해봤다.…","frontmatter":{"date":"August 03, 2024","title":"ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기","categories":"Data_Engineering","author":"최지혁","emoji":"😮"},"fields":{"slug":"/Data Engineering/ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기/"}},"next":{"id":"04b54a36-7686-58d7-8470-3e8c40d92d0f","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p>이번에 AWS EC2를 이용해 NAT instance를 활용해 <a href=\"https://statisticsfox.github.io/Cloud/\">kafka broker</a>를 구축했다. 이제 producer를 실행하면 자연스럽게 카프카를 사용할 수 있다.(리소스 비용 이슈로 프로듀서 서버를 따로 분리하지 않았다.ㅎㅎ)</p>\n<p>다만 producer는 아직 본격적으로 개발한 상태가 아닐뿐더러 나중에 대시보드를 배포할 때 <font color=\"#c00000\">producer를 지속적으로 수정해야 한다.</font> 때문에 계속해서 TEST를 해야 하는데 그 과정이 여간 불편한게 아니다. 매번 Ec2 키고 접속해서 주키퍼랑 카프카 올리고… 아무튼 생각보다 노력을 필요로 한다. 또 Github와 같이 <font color=\"#c00000\">producer의 버전을 관리하고 다른 사람들에게 공유도 용이</font>하게 하기 위해서는 응당 구축해야할 것이 있다.</p>\n<p>그것이 바로.. CI/CD다!! Devops의 기본 소양이자 DE라면 당연히 알아야 하는 CI/CD를 구현해보기로 했다. 다행히도 학교에서 젠킨스를 이용한 CI/CD 구현 수업을 들었기에 개념 정도는 꿰고 있었다.</p>\n<blockquote>\n<p>CI/CD란? <br>\n지속적 통합/지속적 배포 라는 뜻으로 <font color=\"#c00000\">코드 변경 사항을 자동으로 통합하고 배포하는 과정</font>을 말한다. 이를 통해 개발 과정이 자동화되어 개발자의 삶의 질을 향상시킨다. 지속적 통합(CI)은 코드 변경을 자주 통합하여 문제를 신속히 발견하고, 지속적 배포(CD)는 변경 사항을 자동으로 배포하여<font color=\"#c00000\"> 사용자에게 빠르게 제공</font>할 수 있게 한다.</p>\n</blockquote>\n<p>본격적으로 시작해보자 <br></p>\n<div align=\"center\">\n    <img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&amp;authkey=%21AInaQqp_g1hhKd0&amp;width=564&amp;height=311\" alt=\"나 개쩔어\">\n</div>\n<h2 id=\"base\" style=\"position:relative;\"><a href=\"#base\" aria-label=\"base permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BASE</h2>\n<p>먼저 빠르게 아키텍쳐부터 살펴보자 다음은 이번에 설계한 CI/CD 아키텍쳐다.</p>\n<div align=\"center\">\n    <img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21216&amp;authkey=%21AMsEjwlcUVpGtUk&amp;width=2264&amp;height=1284\" alt=\"아키텍쳐\">\n</div>\n<h3 id=\"cicd를-위해-github-action과-code-deploy를-섞은-이유\" style=\"position:relative;\"><a href=\"#cicd%EB%A5%BC-%EC%9C%84%ED%95%B4-github-action%EA%B3%BC-code-deploy%EB%A5%BC-%EC%84%9E%EC%9D%80-%EC%9D%B4%EC%9C%A0\" aria-label=\"cicd를 위해 github action과 code deploy를 섞은 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI/CD를 위해 GIthub action과 Code Deploy를 섞은 이유</h3>\n<p>GitHub action(CI)과 AWS의 Code Deploy(CD) 제품을 함께 사용했다. 이유는 다음과 같다.</p>\n<ul>\n<li>먼저 나는 최종적으로 AWS EC2에 배포를 해야한다. 다만 <font color=\"#c00000\">Github Action 만으로는 EC2내부에 배포하는 것이 어렵다.</font> 때문에 <font color=\"#c00000\">EC2 CD에 최적화된 Codedeploy</font>를 섞어서 사용했다. <del>(그리고 싸다 ㅎ)</del></li>\n<li>Jenkins도 내가 한번 사용해본 도구였기에 CI의 고려 대상이었으나 결국 기각되었다. 이유는 다음과 같다.\n<ul>\n<li>Jenkins를 담당하는<font color=\"#c00000\"> 서버가 따로 필요</font>하다.</li>\n<li>반면에 github action은 MS Azure Cloud를 통해 runner 서버를<font color=\"#c00000\"> 무료로 제공</font>한다.</li>\n<li><font color=\"#c00000\">workflow 공유가 용이하지 않다.</font></li>\n</ul>\n</li>\n<li><font color=\"#c00000\">비용이 거의 들지 않는다. </font>물론 소량의 S3 저장 비용과 NW 트래픽 비용이 들기는 하지만 서버 한 대 증설하는 것에 비할 바가 아니다.</li>\n</ul>\n<p>무엇보다 Github action은 <font color=\"#c00000\">정말 사용하기 편했다. </font>모든 job, hooks 등을 yaml 파일 형식 하나로 커스터마이징 할 수 있다는 점이 마음에 들었다.</p>\n<h2 id=\"core1---cicd-setting\" style=\"position:relative;\"><a href=\"#core1---cicd-setting\" aria-label=\"core1   cicd setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORE1 - CI/CD Setting</h2>\n<p>그럼 구성하는 과정을 알아보자. 크게 총 3가지의 설정이 필요하다.</p>\n<ol>\n<li>권한 설정 &#x26; CodeDeploy Agent 설치 <br>\na. (EC2 할당용)EC2가 CodeDeploy 및 S3에 접속할 수 있도록 하는 권한 <br>\nb. (CodeDeploy 할당용) 배포를 위해 CodeDeploy가 가지는 권한. <br></li>\n<li>S3 버킷 생성</li>\n<li>Github에 AWS 접근 가능한 ACCESS KEY 설정</li>\n</ol>\n<h3 id=\"권한-설정--codedeploy-agent-설치\" style=\"position:relative;\"><a href=\"#%EA%B6%8C%ED%95%9C-%EC%84%A4%EC%A0%95--codedeploy-agent-%EC%84%A4%EC%B9%98\" aria-label=\"권한 설정  codedeploy agent 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>권한 설정 &#x26; CodeDeploy Agent 설치</h3>\n<p>먼저 Ec2에 할당할 권한을 만들어야 한다. 결국 최종적으로 배포할 곳은 Ec2기 때문에 Ec2 권한 설정은 당연한 수순이다. <br>\n먼저 AWS 페이지에서 다음과 같은 경로로 들어간다. <br>\n<strong>IAM -> 역할 -> 역할생성</strong> <br></p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNqsyIntaXbRKCxmcf_Z9r-Abe34AfYKDGNrgI1vCSdZ40?width=1024\" alt=\"아키텍쳐\">\n</div> <br>\n그 후 아래와 같이 설정\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQO7h4n1sBMXTb0r3cUVS_wNAUKQh08ymvDTGBcg3itiYco?width=1024\" alt=\"아키텍쳐\">\n</div><br>\nAWSCodeDeployFullAccess 와 AmazonS3FullAccess 2개 선택 <br>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNi53WlbB_NR4xGnwe--w8PATwtAkMOar9T3XrpI4164yM?width=1024\" alt=\"아키텍쳐\">\n</div><br>\n이름지정 \n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQPGSdrNw4qlQrqHDkOl984nAeqsejEfMqOffkNUaHPH_kY?width=1024\" alt=\"아키텍쳐\">\n</div>\n브로커에 할당 <br>\n**EC2 -&gt; 작업 -&gt; IAM 역할 수정 -&gt; 방금 만든 IAM role** 할당 <br>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNvQ7oDInPFQ6Sm1zlMcKanAcDEYys6R8r8M0SQLSjnZiw?width=1024\" alt=\"아키텍쳐\">\n</div>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQN9s4bdplthSYlp77TSaQ3tAcCcy7bAolqhEe4RjNXEa8w?width=1024\" alt=\"아키텍쳐\">\n</div>\n<p>다음으로 Ec2가 아닌 codedeploy에 대한 권한도 설정해주어야 한다. 바로 위에서 진행한 EC2 할당용과 권한만 다르고 나머지는 똑같이 해서 생성해주도록 하자 <br></p>\n<p><strong>달라지는 점</strong></p>\n<ol>\n<li>엔티티 선택에서 EC2가 아니라 <font color=\"#c00000\">CodeDeploy</font> 선택</li>\n<li>권한 추가시 <font color=\"#c00000\">AWSCodeDeployRole </font>하나만 추가</li>\n</ol>\n<h3 id=\"codedeploy-생성application\" style=\"position:relative;\"><a href=\"#codedeploy-%EC%83%9D%EC%84%B1application\" aria-label=\"codedeploy 생성application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CodeDeploy 생성(Application)</h3>\n<p><strong>Codedeploy -> 애플리케이션 -> 애플리케이션 생성</strong> <br>\n권한을 생성했으니 이제 CodeDeploy 앱을 생성해보자 위 경로로 들어가 아래 처럼 설정해주자</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQOy6-SiWWpsQZ5VgULLahR4AeBrDMbWlBp5qhxN_PkSERc?width=1024\" alt=\"CodeDeploy 생성\">\n</div>\n<h3 id=\"배포그룹-생성\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%ED%8F%AC%EA%B7%B8%EB%A3%B9-%EC%83%9D%EC%84%B1\" aria-label=\"배포그룹 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배포그룹 생성</h3>\n<p>이제 만든 애플리케이션이 어디에 배포할 것인지 배포 그룹을 설정해줄 차례이다. 아래 과정을 잘 따라가 보자</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQPkLTtAxD9USrDW7MleoM_tATL1KL9o4BlXR9zGJf6Y_08?width=1024\" alt=\"배포그룹 생성\">\n</div>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQPCexHjBrlATLgmnszA71S2AZ4TSBNXG5oQqwiSSLYz__A?width=1024\" alt=\"배포 유형 및 환경 구성\">\n</div>\n<p>여기까지 잘따라왔으면 배포 설정을 선택해 주어야 한다.\n배포설정은 <font color=\"#c00000\">AllatOnce로 설정</font> 하도록 하자 <br>나는 실시간 처리 특성상 가용성을 위해 AllAtTime으로 설정했다.</p>\n<blockquote>\n<p>배포 설정</p>\n<ul>\n<li>OneAtATime: 한 번에 하나의 인스턴스에 배포, 전체가 배포 성공해야 성공으로 간주</li>\n<li>HalfAtATime: 절반씩 나누어 배포, 최종적으로 절반 이상의 인스턴스에 배포 성공하면 성공으로 간주</li>\n<li>AllAtTime: 최대한 한번에 많은 인스턴스에 배포, 1개의 인스턴스에 라도 배포 성공하면 성공으로 간주</li>\n</ul>\n</blockquote>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQOBPhjqqNLMR6dv2mJibzX1Aeq4pvImkSMUitv8l8rfH0M?width=1024\" alt=\"배포 유형 및 환경 구성\">\n</div><br>\n마지막으로 로드 밸런서 해제만 체크 해주면 비로소 Codedeploy 설정이 끝나게 된다. 우리는 CD 즉, 지속적 배포가 목적이기 때문에 로드 밸런서는 따로 필요하지 않다. \n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNOB1rbSW0kT4_sXYCji7DEAfaMG5LiSHjAijUuLKkDVm8?width=1200&amp;height=280\" alt=\"로드 밸런서\">\n</div>\n<h3 id=\"codedeploy-agent-설치\" style=\"position:relative;\"><a href=\"#codedeploy-agent-%EC%84%A4%EC%B9%98\" aria-label=\"codedeploy agent 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CodeDeploy Agent 설치</h3>\n<p>이제 CodeDeploy Agent라는 것을 브로커에 설치해주어야 한다. codedeploy가 ec2 내에서 동작할 수 있도록 해주는 것인데 아래 공식문서 기반으로 각각 카프카 브로커에 설치한다. <br>\n<a href=\"https://docs.aws.amazon.com/ko_kr/codedeploy/latest/userguide/codedeploy-agent-operations-install-ubuntu.html\">CodeDeploy Agent 설치 공식문서</a></p>\n<h3 id=\"s3-생성\" style=\"position:relative;\"><a href=\"#s3-%EC%83%9D%EC%84%B1\" aria-label=\"s3 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>S3 생성</h3>\n<p>S3 버킷은 우리가 중요한 저장소를 만들어서 관리하다기 보다 그냥 배포할 tar 파일이 잠깐 저장되는 휴계소? 검문소? 같은 곳이라 크게 중요하지 않다. 그냥 모든 설정을 디폴트로 설정해주면 된다.\n아래처럼 버킷 =이름과 디렉토리만 하나 생성해주도록 하자</p>\n<ul>\n<li>버킷이름: datalake-actions-deploy으로 설정(사실 이름도 본인이 원하는 형태로 설정해줘도 된다.)</li>\n<li>디렉토리 추가하기: 폴더 이름은 kafka-producer</li>\n</ul>\n<h3 id=\"aws----user-생성-github-접근용\" style=\"position:relative;\"><a href=\"#aws----user-%EC%83%9D%EC%84%B1-github-%EC%A0%91%EA%B7%BC%EC%9A%A9\" aria-label=\"aws    user 생성 github 접근용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS -  USER 생성 (github 접근용)</h3>\n<h4 id=\"사용자-생성\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%83%9D%EC%84%B1\" aria-label=\"사용자 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자 생성</h4>\n<p>마찬가지로 굉장히 간단한 과정이다.\n먼저 <strong>IAM -> 사용자 -> 사용자 생성</strong>으로 들어간다.</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNgbYU2G0IzRplnvx_DafMvAdkBXLJrmcDdf1OSnAYxMaE?width=1340&amp;height=622\" alt=\"github 접근용 AWS USER 생성\">\n</div>\n<p>이때 사용자를 생성해 주는데 권한은 EC2 할당용과 마찬가지로 <font color=\"#c00000\">S3FullAccess &#x26; CodeDeployFullAccess</font> 2가지를 지정해준다.</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQMUJc61pBy2T6DVHzFBZlJKAfaXjy6up3eHLIYGi-R1qL0?width=1246&amp;height=508\" alt=\"github 접근용 AWS USER 생성\">\n</div>\n<h3 id=\"엑세스-키-생성\" style=\"position:relative;\"><a href=\"#%EC%97%91%EC%84%B8%EC%8A%A4-%ED%82%A4-%EC%83%9D%EC%84%B1\" aria-label=\"엑세스 키 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엑세스 키 생성</h3>\n<p>전 단계에서 만든 사용자 -> 엑세스 키 생성을 선택한다.</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNrZmzeyJROTYK7LreOLlp8ARJIfFVmyH6xJNw4ZwuuSak?width=1322&amp;height=548\" alt=\"엑세스 키 생성\">\n</div><br>\n그럼 다음과 같이 <font color=\"#c00000\">ACCESS KEY</font>와 <font color=\"#c00000\">SECRET ACCESS KEY</font>가 만들어진다.\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNVa_UAh0MRQaXVmeec5O_iAWHPbVQ9Vx0i0fz4eUWm9kk?width=1102&amp;height=544\" alt=\"엑세스 키 저장\">\n</div>\n<p><font color=\"#c00000\"> <em>주의! 창을 닫은 후 비밀 엑세스 키는 다시는 볼 수 없기에 꼭 사전에 저장해두기</em> </font></p>\n<h4 id=\"github에-엑세스-키-할당\" style=\"position:relative;\"><a href=\"#github%EC%97%90-%EC%97%91%EC%84%B8%EC%8A%A4-%ED%82%A4-%ED%95%A0%EB%8B%B9\" aria-label=\"github에 엑세스 키 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Github에 엑세스 키 할당</h4>\n<p>아래 사진의 경로 처럼 들어가 SECRET KEY에 AWS USER ACCESS KEY 할당</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQMAMMyEitDeRoSUFJdefk9CAR0UGp7N8ZGrzM8D3UxTBfo?width=1028&amp;height=638\" alt=\"엑세스 키 저장\">\n</div>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQP7lJ1rD6wtR4YA73rwRkSqAexTPTQUc1mNqjHr9EEtUTE?width=2472&amp;height=612\" alt=\"엑세스 키 저장\">\n</div>\n<h2 id=\"core2---cicd-develope\" style=\"position:relative;\"><a href=\"#core2---cicd-develope\" aria-label=\"core2   cicd develope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORE2 - CI/CD Develope</h2>\n<p>드디어 막바지 스텝이다 이제 CI/CD를 위한 몇가지 필수 파일을 설정해주면 된다. <br>\n필요한 파일은 아래 두 가지다. <br></p>\n<ul>\n<li>Github action에 필요한 <font color=\"#c00000\">workflow.yaml </font> <br></li>\n<li>codeDeploy에 필요한 <font color=\"#c00000\">appspec.yaml </font> <br></li>\n</ul>\n<p>두 가지 파일은 아래 github 링크에 가면 자세하게 확인이 가능하다. 아래 appspec.yaml 파일처럼 주석으로 이쁘게 설명해두었기에 별다른 설명은 하지 않겠다. <br>\n<a href=\"https://github.com/StatisticsFox/Ddareungi-kafka-producer/tree/main\">Ddareungi-kafka-producer-Github</a></p>\n<p>appspec.yaml 파일</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># CodeDeploy의 어플리케이션 스펙을 정의하는 파일입니다. </span>\n<span class=\"token comment\"># version은 필수적으로 명시해야 하며, 현재는 0.0만 지원됩니다.</span>\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span>\n\n<span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> linux\n\n<span class=\"token comment\"># 파일을 복사할 경로를 지정합니다.</span>\n<span class=\"token comment\"># files 항목에서는 source와 destination을 여러 개 지정할 수 있으며,</span>\n<span class=\"token comment\"># 하위 디렉토리별로 destination을 다르게 지정할 수 있습니다.</span>\n<span class=\"token comment\"># source가 디렉토리일 경우, 디렉토리 내부의 파일 및 서브 디렉토리들이 복사됩니다 (지정한 디렉토리 자체는 복사되지 않음).</span>\n<span class=\"token comment\"># source가 파일일 경우, 해당 파일이 복사됩니다.</span>\n<span class=\"token key atrule\">files</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> /\n    <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> /home/ubuntu/kafka<span class=\"token punctuation\">-</span>producer\n    \n<span class=\"token comment\"># destination 경로에 동일한 파일이 이미 존재할 경우의 행동을 지정합니다.</span>\n\n<span class=\"token comment\"># 다음 세 가지 옵션 중 하나를 사용할 수 있습니다:</span>\n<span class=\"token comment\"># - DISALLOW: 동일한 파일이 존재할 경우 복사를 허용하지 않습니다.</span>\n<span class=\"token comment\"># - OVERWRITE: 동일한 파일이 존재할 경우 기존 파일을 덮어씁니다.</span>\n<span class=\"token comment\"># - RETAIN: 동일한 파일이 존재할 경우 기존 파일을 유지합니다.</span>\n<span class=\"token key atrule\">file_exists_behavior</span><span class=\"token punctuation\">:</span> OVERWRITE\n\n<span class=\"token comment\"># 파일 복사 후 권한을 상세하게 지정할 수 있습니다.</span>\n<span class=\"token comment\"># pattern과 except 키워드를 통해 대상 파일을 구체적으로 지정할 수 있습니다.</span>\n<span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">object</span><span class=\"token punctuation\">:</span> /home/ubuntu/kafka<span class=\"token punctuation\">-</span>producer\n    <span class=\"token key atrule\">owner</span><span class=\"token punctuation\">:</span> ubuntu    <span class=\"token comment\"># 파일의 소유자(owner)를 지정합니다.</span>\n    <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> ubuntu   <span class=\"token comment\"># 파일의 그룹(group)을 지정합니다.</span>\n    <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">755</span>      <span class=\"token comment\"># 파일의 권한(mode)을 지정합니다. 여기서는 rwxr-xr-x로 설정됩니다.</span>\n\n\n<span class=\"token key atrule\">hooks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ApplicationStop</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">location</span><span class=\"token punctuation\">:</span> ./config/applicationstop.sh\n      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>\n  \n  <span class=\"token key atrule\">ApplicationStart</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">location</span><span class=\"token punctuation\">:</span> ./config/applicationstart.sh\n      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span></code></pre></div>\n<p>위와 같이 CI/CD에 필요한 파일들을 작성해서 github 안에 두면 다음과 같이 main에 push가 일어날때마다 빌드가 이루어진다.</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQPKT-L03iPrRbWGolywATIFAU3AY8CACWYpK9UUl9WBdrE?width=1024\" alt=\"CI\">\n</div>\n<br>\n또한 빌드가 완료되면 다음과 같이 codedeploy가 S3의 파일을 가져와 EC2로 배포한다.\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQOyzh6Y8PH6SJJjiY0ytEivARlhptPF-qvm2nXywiFAJEU?width=1024\" alt=\"CD\">\n</div>\n<br>\n마지막으로 카프카 broker에 가서 확인해 보면 3개의 브로커 서버 모두에 kafka producer가 동일하게 배포된것을 확인 가능하다.\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQMsrdT_tUrVSaZ28XefpYS1AR7lO2Et7ZP39mjXqR3v1aE?width=1032&amp;height=888\" alt=\"배포 확인\">\n</div>\n<h2 id=\"fi\" style=\"position:relative;\"><a href=\"#fi\" aria-label=\"fi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FI</h2>\n<p>이렇게 Github Actions과 AWS CodeDeploy를 이용한 CI/CD구현할 수 있었다. 솔직히 어렵지는 않았으나 이유가 있다. 바로 TEST가 빠졌다는 것이다. 원래 보통 CI/CD는 웹서비스를 배포하거나 도커 파일을 배포할때 지속적으로 배포하기 위해 쓰인다. 그런 형태의 서비스인 경우 다양한 환경에서의 테스트가 굉장히 중요해서 CI파트에서 필수적으로 테스트가 진행되고 테스트에 실패할 시 재개발을 해야한다. <br> <br>\n이번 프로젝트에서는 producer 하나만 보는 것이기 때문에 테스트 환경 구축을 CI마다 하는 것보다. 그냥 서버 내에서 수동으로 실행하는게 훨씬 편했고 빠르게 할 수 있었기에 CI에서 많은 시간을 잡아먹는 테스트를 뺐다. <br> <br>\n그래도 전체적으로 CI/CD환경을 구축해보고 개발시 굉장한 편리함을 가져가구 있다. 지금 쿠버네티스를 공부중인데 Argo를 이용한 CI/CD도 도전해볼 것이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">들어가기에 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#base\">BASE</a></p>\n<ul>\n<li><a href=\"#cicd%EB%A5%BC-%EC%9C%84%ED%95%B4-github-action%EA%B3%BC-code-deploy%EB%A5%BC-%EC%84%9E%EC%9D%80-%EC%9D%B4%EC%9C%A0\">CI/CD를 위해 GIthub action과 Code Deploy를 섞은 이유</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#core1---cicd-setting\">CORE1 - CI/CD Setting</a></p>\n<ul>\n<li>\n<p><a href=\"#%EA%B6%8C%ED%95%9C-%EC%84%A4%EC%A0%95--codedeploy-agent-%EC%84%A4%EC%B9%98\">권한 설정 &#x26; CodeDeploy Agent 설치</a></p>\n</li>\n<li>\n<p><a href=\"#codedeploy-%EC%83%9D%EC%84%B1application\">CodeDeploy 생성(Application)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B0%B0%ED%8F%AC%EA%B7%B8%EB%A3%B9-%EC%83%9D%EC%84%B1\">배포그룹 생성</a></p>\n</li>\n<li>\n<p><a href=\"#codedeploy-agent-%EC%84%A4%EC%B9%98\">CodeDeploy Agent 설치</a></p>\n</li>\n<li>\n<p><a href=\"#s3-%EC%83%9D%EC%84%B1\">S3 생성</a></p>\n</li>\n<li>\n<p><a href=\"#aws----user-%EC%83%9D%EC%84%B1-github-%EC%A0%91%EA%B7%BC%EC%9A%A9\">AWS -  USER 생성 (github 접근용)</a></p>\n<ul>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%83%9D%EC%84%B1\">사용자 생성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%97%91%EC%84%B8%EC%8A%A4-%ED%82%A4-%EC%83%9D%EC%84%B1\">엑세스 키 생성</a></p>\n<ul>\n<li><a href=\"#github%EC%97%90-%EC%97%91%EC%84%B8%EC%8A%A4-%ED%82%A4-%ED%95%A0%EB%8B%B9\">Github에 엑세스 키 할당</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#core2---cicd-develope\">CORE2 - CI/CD Develope</a></p>\n</li>\n<li>\n<p><a href=\"#fi\">FI</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 31, 2024","title":"Implementing CI/CD with Github Actions CI + AWS CodeDeploy","categories":"Data_Engineering Cloud","author":"최지혁","emoji":"🪐"},"fields":{"slug":"/Data Engineering/Github Actions CI + CodeDeploy로 CICD 구햔하기/"}},"prev":{"id":"65ed6c54-090e-5298-95e0-3f10541b2418","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>","frontmatter":{"date":"August 11, 2024","title":"Terraform으로 AKS에 airflow 띄우기","categories":"Data_Engineering","author":"최지혁","emoji":"🛠️"},"fields":{"slug":"/Data Engineering/AKS airflow/"}},"site":{"siteMetadata":{"siteUrl":"https://statisticsfox.github.io","comments":{"utterances":{"repo":"StatisticsFox/blog-comments"}}}}},"pageContext":{"slug":"/Data Engineering/ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기/","nextSlug":"/Data Engineering/Github Actions CI + CodeDeploy로 CICD 구햔하기/","prevSlug":"/Data Engineering/AKS airflow/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}