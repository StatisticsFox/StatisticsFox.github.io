{"componentChunkName":"component---src-templates-blog-template-js","path":"/Data Engineering/Terraform으로 AKS에 airflow 띄우고 git으로 DAG 관리하기/","result":{"data":{"cur":{"id":"292776ae-979d-5701-bede-3ea0a87ceb19","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p>이번에 RAG를 이용한 채용정보 챗봇 구축을 위해 Azure 쿠버네티스 환경(통칭 AKS)에서 ETL 프로젝트를 해보기 위해 아래와 같은 계획을 짰다.</p>\n<ol>\n<li>프로젝트 환경에 airflow를 띄우고 주기적인 크롤링</li>\n<li>SPARK를 통한 데이터 마트 구축</li>\n<li>GPT-3 토크나이저를 이용한 데이터 임베딩</li>\n<li>크로마 DB에 데이터 적제</li>\n</ol>\n<p>이거 할 생각에 잔뜩 기대하고 허겁지겁 일단 AKS 위에 쿠버네티스를 올린 후 pod에 airflow를 올리고 DAG를 GIT으로 관리할 수 있게끔 구성했다. ACR(Azure Container Registry)도 만들어 도커로 환경 배포까지 자동화를 해놨으나 <font color=\"#c00000\">결국 무산 되었다…</font><br><br>\n그 이유는 바로 비용문제이다. 일단 내가 개발한 크롤러로 데이터를 수집하면 데이터의 형태가 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Datetime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2024-08-10\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[강동/통근] 삼성E&amp;A 비서/사무보조 사원 채용\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"URL\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.saramin.co.kr/zf_user/jobs/relay/view?view_type=search&amp;rec_idx=48782490&amp;location=ts&amp;searchType=search&amp;paid_fl=n&amp;search_uuid=004d110a-a231-41c0-92da-9655708bbb41\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(주)에스이에스, [강동/통근] 삼성E&amp;A 비서/사무보조 사원 채용, 경력:경력무관, 학력:학력무관, 연봉:2,960 만원, 마감일:2024-08-19, 홈페이지:www.seshr.co.kr\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"end_date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2024-08-19,\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start_date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2024.08.09 14:00\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Work_history\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"무관(신입포함)\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Education\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"학력무관\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Job_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"계약직, 파견직\\n상세보기\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Salary\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"연봉 2,960 만원 (주 40시간)\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"근무형태\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"상세보기\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"working time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"주 5일(월~금) 08:00~17:00\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"working area\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"서울 강동구 지도\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Co_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(주)에스이에스\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"img_list\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"detail_data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[강동/통근] 삼성E&amp;A\\n비서/사무보조 사원 모집\\n모집부문 및 상세내용\\n공통 자격요건\\nㆍ학력 : 무관\\n비서행정 1명\\n     담당업무\\n    ㆍ비서 업무\\n    ㆍ팀 서무 업무(팀 공통 업무 지원)\\n    ㆍ예산 및 월별 결산 지원(경비처리, 계산서 등)\\n    ㆍ출장 지원(비자신청 및 예약 등)\\n\\n 자격사항\\nㆍ동종업계 경력자 우대\\nㆍMS-Office(워드/엑셀/파워포인트) 능통자 우대\\nㆍ경리업무 경험자(SAP 또는 ERP시스템 유경험자 우대)\\nㆍ근거리 거주자 우대\\n\\n  ■ 삼성그룹사 경력 쌓을 수 있습니다.\\n  ■ 면접합격 이후 빠른 출근 가능\\n  ■ 서울,경기,인천권 통근버스 운행\\n  ■ 경력 증명서 발급 가능\\n\\n근무조건\\n\\n\\n근무형태 : 파견계약직 (12개월/연장 시 최대 2년까지 근무가능) \\n근무일시 : 주 5일(월~금) 08:00 ~ 17:00 (점심시간 11:30 ~ 13:30 中 1시간)\\n근무지역 : 서울 강동구 상일로 6길 26 글로벌엔지니어링센터(상일동역 인근)\\n급여수준 : 2,224,000원(세전) + 명절상여금 별도 (설날/추석 각 148만 연 2회) + 연차수당 별도(잔여 발생 시)  = 연봉기준 약 2,960만\\n\\n복리후생 : 명절상여금(연 2회/근속기간 무관) / 4대보험 / 연차수당 / 경조휴가 / 명절선물 등\\n \\n\\n전형절차\\n서류전형\\n1차면접\\n최종합격\\n접수기간 및 방법\\nㆍ 접수기간 : ~ 2024년 08월 19일 (월) 09시\\nㆍ 접수방법 : 사람인 입사지원 또는  sh0722@seshr.co.kr 메일 접수\\nㆍ 이력서양식 : 자사양식 (첨부파일 참조) \\n유의사항\\nㆍ입사지원 서류에 허위사실이 발견될 경우, 채용확정 이후라도 채용이 취소될 수 있습니다.\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 문제가 바로 ‘detail_data’다. 이 데이터를 <code class=\"language-text\">임베딩하는데 드는 비용</code>, <code class=\"language-text\">학습시키는데 드는 비용</code>, 그리고 프롬프트만해도 <code class=\"language-text\">API 비용</code>이 엄청나다. 근데 해당 기능은 필수적인 기능이라 데이터 엔지니어링 파트에서 비용 절감을 하는 수밖에 없었고 쿠버네티스를 사용하지 않기로 했다.ㅜㅜㅜ(<del>데엔의 희생..</del>)  <br><br>\n이거 어떻게 할까 알아보는데 <font color=\"#c00000\">EKS는 노드 풀 단계에서 부터 서버리스가 가능</font>한 반면 <font color=\"#0096FF\">AKS</font>는 노드 풀 비용은 필수 그리고 그 후 <font color=\"#0096FF\">스케일 아웃에서만 서버리스가 제공</font>된다는 사실을 알았다. <del>Azure 싫어하는거 아닌데 뭔가 맛이 없다.</del>\n다만 우리는 한이음 멘토님이 마소 현역이라 AWS 금지령이 내려져서 울며 겨자먹기로 Azure를 써야 하는 상황이다.</p>\n<p>결국 그냥 AzureFunction을 사용해서 주기적으로 크롤링을 하고 VM 하나 띄워서 그 안에 Chroma DB를 띄우기로 했다.</p>\n<p>그래서 이미 진행한 AKS 구축해 둔게 아무쓸모가 없어졌다! 때문에 이대로 폭파시키기는 너무 아쉬워 그 과정을 기록해 두고자 한다.\n<br>\n그럼 시작해보자.</p>\n<div align=\"center\">\n    <img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&amp;authkey=%21AInaQqp_g1hhKd0&amp;width=564&amp;height=311\" alt=\"시작해보자\">\n</div>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<p>해당 패키지들이 설치되어 있는지 우선 확인하자</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/cli/azure/install-azure-cli\">az cli</a>가 설치되어 있는지</li>\n<li>.kubectl를 설치했는지 <a href=\"https://learn.microsoft.com/en-us/azure/aks/learn/quick-kubernetes-deploy-cli#connect-to-the-cluster\">az aks install-cli.</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli\">Terraform CLI</a>가 설치되어 있는지.</li>\n</ul>\n<h2 id=\"terraform을-이용한-aks-구성\" style=\"position:relative;\"><a href=\"#terraform%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-aks-%EA%B5%AC%EC%84%B1\" aria-label=\"terraform을 이용한 aks 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform을 이용한 AKS 구성</h2>\n<p>본인이 클라우드 환경에서 Portal 만지는게 어렵다?? 그럼 그냥 고개를 들어 Terraform을 보면 된다. <font color=\"#c00000\">Terraform은 인프라를 코드로 관리할 수 있게 해주는 굉장히 편리한 도구</font>로 apply 딸깍 한번에 수많은 설정들이 적용되어 인프라 구축이 가능하다. 물론 러닝커브가 있으나 튜토리얼이 사례 별로 “아니 이 정도까지 친절하다고?”수준으로 잘 나와 있기에 그대로 따라하면된다. GPT가 필요 없을 정도로 친절하다.\n<br>\n<a href=\"https://registry.terraform.io\">Terraform 튜토리얼</a><br>\n<a href=\"https://developer.hashicorp.com/terraform/docs\">Terraform 공식 docs</a></p>\n<p>그럼 코드를 보도록 하자</p>\n<h3 id=\"providerstf\" style=\"position:relative;\"><a href=\"#providerstf\" aria-label=\"providerstf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>providers.tf</h3>\n<p>providers는 가장 기초적인 파일로 기본적인 패키지나 설정 그리고 내가 어떤 플랫폼의 인프라를 사용할 것인지 사전 정의를 해두는 파일이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">provider <span class=\"token string\">\"azurerm\"</span> <span class=\"token punctuation\">{</span>\n  skip_provider_registration = <span class=\"token string\">\"true\"</span>\n  features <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nterraform <span class=\"token punctuation\">{</span>\n  required_version = <span class=\"token string\">\">=1.0\"</span>\n\n  required_providers <span class=\"token punctuation\">{</span>\n    azapi = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"azure/azapi\"</span>\n      version = <span class=\"token string\">\"~>1.5\"</span>\n    <span class=\"token punctuation\">}</span>\n    azurerm = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/azurerm\"</span>\n      version = <span class=\"token string\">\"~>3.0\"</span>\n    <span class=\"token punctuation\">}</span>\n    random = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/random\"</span>\n      version = <span class=\"token string\">\"~>3.0\"</span>\n    <span class=\"token punctuation\">}</span>\n    time = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/time\"</span>\n      version = <span class=\"token string\">\"0.9.1\"</span>\n    <span class=\"token punctuation\">}</span>\n    helm = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/helm\"</span>\n      version = <span class=\"token string\">\"~>2.0\"</span>\n    <span class=\"token punctuation\">}</span>\n    kubernetes = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/kubernetes\"</span>\n      version = <span class=\"token string\">\"~>2.0\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nprovider <span class=\"token string\">\"kubernetes\"</span> <span class=\"token punctuation\">{</span>\n  host                   = azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.host\n  client_certificate     = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.client_certificate)\n  client_key             = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.client_key)\n  cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.cluster_ca_certificate)\n<span class=\"token punctuation\">}</span>\n\nprovider <span class=\"token string\">\"helm\"</span> <span class=\"token punctuation\">{</span>\n  kubernetes <span class=\"token punctuation\">{</span>\n    host                   = azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.host\n    client_certificate     = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.client_certificate)\n    client_key             = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.client_key)\n    cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.cluster_ca_certificate)\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"variablestf\" style=\"position:relative;\"><a href=\"#variablestf\" aria-label=\"variablestf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>variables.tf</h3>\n<p>main.tf에 정의될 변수들을 미리 선언해둔 파일이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">variable <span class=\"token string\">\"app_name\"</span> <span class=\"token punctuation\">{</span>\n  type        = string\n  description = <span class=\"token string\">\"name of the application\"</span>\n<span class=\"token punctuation\">}</span>\n\nvariable <span class=\"token string\">\"location\"</span> <span class=\"token punctuation\">{</span>\n  type        = string\n  description = <span class=\"token string\">\"location for the resources\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"maintfvals\" style=\"position:relative;\"><a href=\"#maintfvals\" aria-label=\"maintfvals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main.tfvals</h3>\n<p>variables.tf에 선언된 변수들의 실재값이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">app_name = <span class=\"token string\">\"airflow\"</span>\nlocation = <span class=\"token string\">\"koreacentral\"</span></code></pre></div>\n<h3 id=\"maintf\" style=\"position:relative;\"><a href=\"#maintf\" aria-label=\"maintf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main.tf</h3>\n<p>해당 파일은 내가 생송하고자 하는 플렛폼과 제품에 따라서 전부 다르기에 따로 리뷰는 하지 않겠다. 위에있는 terraform 가이드를 살펴보고 스스로 구축을 해보면 된다.\n간단하게만 언급하면 아래와 같다.</p>\n<ul>\n<li>Airflow 로그를 저장하기 위한 Blob 컨테이너를 프로비저닝 코드</li>\n<li>이미지를 가져오기 위한 ACR 프로비저닝 코드</li>\n<li>리소스 그룹 프로비저닝 코드</li>\n<li>기본 노드 풀이 있는 Kubernetes 클러스터 정의</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">resource <span class=\"token string\">\"azurerm_resource_group\"</span> <span class=\"token string\">\"rg\"</span> <span class=\"token punctuation\">{</span>\n  name     = <span class=\"token string\">\"${var.app_name}rg\"</span>\n  location = var.location\n<span class=\"token punctuation\">}</span>\n\n# Azure Kubernetes Cluster\n\nresource <span class=\"token string\">\"azurerm_kubernetes_cluster\"</span> <span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">{</span>\n  name                = <span class=\"token string\">\"${var.app_name}aks\"</span>\n  location            = var.location\n  resource_group_name = azurerm_resource_group.rg.name\n  dns_prefix          = <span class=\"token string\">\"${var.app_name}-aks\"</span>\n\n  default_node_pool <span class=\"token punctuation\">{</span>\n    name       = <span class=\"token string\">\"default\"</span>\n    node_count = <span class=\"token number\">1</span>\n    vm_size    = <span class=\"token string\">\"Standard_DS2_v2\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  identity <span class=\"token punctuation\">{</span>\n    type = <span class=\"token string\">\"SystemAssigned\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  storage_profile <span class=\"token punctuation\">{</span>\n    blob_driver_enabled = <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n# Azure Container Registry\n\nresource <span class=\"token string\">\"azurerm_container_registry\"</span> <span class=\"token string\">\"acr\"</span> <span class=\"token punctuation\">{</span>\n  name                = <span class=\"token string\">\"${var.app_name}acregistry\"</span>\n  resource_group_name = azurerm_resource_group.rg.name\n  location            = var.location\n  sku                 = <span class=\"token string\">\"Standard\"</span>\n  admin_enabled       = <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"azurerm_role_assignment\"</span> <span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">{</span>\n  principal_id         = azurerm_kubernetes_cluster.main.kubelet_identity<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.object_id\n  role_definition_name = <span class=\"token string\">\"AcrPull\"</span>\n  scope                = azurerm_container_registry.acr.id\n<span class=\"token punctuation\">}</span>\n\n# Blob storage for Airflow logs\n\nresource <span class=\"token string\">\"azurerm_storage_account\"</span> <span class=\"token string\">\"airflow\"</span> <span class=\"token punctuation\">{</span>\n  name                     = <span class=\"token string\">\"${var.app_name}airflowlogs\"</span>\n  resource_group_name      = azurerm_resource_group.rg.name\n  location                 = var.location\n  account_tier             = <span class=\"token string\">\"Standard\"</span>\n  account_replication_type = <span class=\"token string\">\"LRS\"</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"azurerm_storage_container\"</span> <span class=\"token string\">\"airflow_logs\"</span> <span class=\"token punctuation\">{</span>\n  name                  = <span class=\"token string\">\"airflow-logs\"</span>\n  storage_account_name  = azurerm_storage_account.airflow.name\n  container_access_type = <span class=\"token string\">\"private\"</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"azurerm_storage_management_policy\"</span> <span class=\"token string\">\"prune_logs\"</span> <span class=\"token punctuation\">{</span>\n  storage_account_id = azurerm_storage_account.airflow.id\n\n  rule <span class=\"token punctuation\">{</span>\n    name    = <span class=\"token string\">\"prune-logs\"</span>\n    enabled = <span class=\"token boolean\">true</span>\n    filters <span class=\"token punctuation\">{</span>\n      prefix_match = <span class=\"token punctuation\">[</span><span class=\"token string\">\"airflow-logs\"</span><span class=\"token punctuation\">]</span>\n      blob_types   = <span class=\"token punctuation\">[</span><span class=\"token string\">\"blockBlob\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    actions <span class=\"token punctuation\">{</span>\n      base_blob <span class=\"token punctuation\">{</span>\n        delete_after_days_since_modification_greater_than = <span class=\"token number\">7</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"azure-인프라-배포를-위한-서비스-주체-생성\" style=\"position:relative;\"><a href=\"#azure-%EC%9D%B8%ED%94%84%EB%9D%BC-%EB%B0%B0%ED%8F%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A3%BC%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"azure 인프라 배포를 위한 서비스 주체 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Azure 인프라 배포를 위한 서비스 주체 생성</h2>\n<p>Azure에 인프라를 배포하려면 먼저 인프라를 배포할 권한이 있는 서비스 주체를 만들어야 한다. 아래처럼 진행해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">az login\n\nexport SUBSCRIPTION_ID=$(az account show --query id -o tsv)\nexport SERVICE_PRINCIPAL_NAME=&quot;InfrastructureAccount&quot;\n\naz ad sp create-for-rbac \\\n    --name $SERVICE_PRINCIPAL_NAME \\\n    --role &quot;Owner&quot; \\\n    --scopes &quot;/subscriptions/$SUBSCRIPTION_ID&quot; &gt; credentials.json</code></pre></div>\n<blockquote>\n<p><font color=\"#c00000\">주의!⚠️⚠️⚠️⚠️⚠️⚠️</font> <br>\n다만 credentials.json의 내용은 비밀로 유지해야 한다. 공개적으로 노출하지 않도록 해야 하기에 혹시라도 github에 게시할 때는 <code class=\"language-text\">.gitignore</code>을 사용 하도록 하자.</p>\n</blockquote>\n<p>또한 Terraform이 서비스 주체로 인증하려면 일부 환경 변수를 설정해야 하는데 아래 코드를 통해 진행 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">export ARM_CLIENT_ID=`cat credentials.json | python -c &#39;import json,sys;obj=json.load(sys.stdin);print(obj[&quot;appId&quot;])&#39;`\nexport ARM_CLIENT_SECRET=`cat credentials.json | python -c &#39;import json,sys;obj=json.load(sys.stdin);print(obj[&quot;password&quot;])&#39;`\nexport ARM_TENANT_ID=`cat credentials.json | python -c &#39;import json,sys;obj=json.load(sys.stdin);print(obj[&quot;tenant&quot;])&#39;`\nexport ARM_SUBSCRIPTION_ID=`az account show --query id -o tsv`</code></pre></div>\n<h2 id=\"aks-클러스터-배포\" style=\"position:relative;\"><a href=\"#aks-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%B0%B0%ED%8F%AC\" aria-label=\"aks 클러스터 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AKS 클러스터 배포</h2>\n<p>이제 배포를 해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">terraform init\nterraform fmt\nterraform validate\nterraform plan\nterraform apply</code></pre></div>\n<p>그럼 생각보다 오래걸리는데 그동안 유튜브 한편 보고와도 좋다.</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQMBrL5LviN7QqpIXek04U-uAZtjNP0bDt0Mqceq2lxFbbY?width=1024\" alt=\"생성중\">\n</div>\n그럼 이렇게 생성되었다고 초록색으로 글씨가 나올 것이다.\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQOwZsSusgahRbOkT2cYObDhATPZGsIU8T2y7KTQlE_vxB0?width=1024\" alt=\"생성완료\">\n</div>\n<p>이제 모든 포트를 나열해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">NAMESPACE     NAME                                  READY   STATUS    RESTARTS   AGE\nkube-system   azure-ip-masq-agent-58pln             1/1     Running   0          20h\nkube-system   cloud-node-manager-glrh9              1/1     Running   0          20h\nkube-system   coredns-76b9877f49-8h6cz              1/1     Running   0          20h\nkube-system   coredns-76b9877f49-pjjdb              1/1     Running   0          20h\nkube-system   coredns-autoscaler-85f7d6b75d-wdbwd   1/1     Running   0          20h\nkube-system   csi-azuredisk-node-mmpxj              3/3     Running   0          20h\nkube-system   csi-azurefile-node-sbw7j              3/3     Running   0          20h\nkube-system   csi-blob-node-jhtnr                   3/3     Running   0          17h\nkube-system   konnectivity-agent-659478b8b7-gpkwv   1/1     Running   0          20h\nkube-system   konnectivity-agent-659478b8b7-zqksv   1/1     Running   0          20h\nkube-system   kube-proxy-c48c8                      1/1     Running   0          20h\nkube-system   metrics-server-c456c67cb-dqv8f        2/2     Running   0          20h\nkube-system   metrics-server-c456c67cb-r9f82        2/2     Running   0          20h</code></pre></div>\n<h2 id=\"helm을-사용하여-airflow-설치\" style=\"position:relative;\"><a href=\"#helm%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-airflow-%EC%84%A4%EC%B9%98\" aria-label=\"helm을 사용하여 airflow 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Helm을 사용하여 Airflow 설치</h2>\n<p>이제 <a href=\"https://github.com/apache/airflow/tree/main/chart\">Airflow Helm 차트</a>를 이용해서 Airflow를 설치해보자</p>\n<p>먼저 아래와 같은 <code class=\"language-text\">valuse.yaml</code> 파일을 만들어준다.</p>\n<h3 id=\"valuesyaml\" style=\"position:relative;\"><a href=\"#valuesyaml\" aria-label=\"valuesyaml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>values.yaml</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">\n<span class=\"token comment\"># Select certain nodes for airflow pods.</span>\n<span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">agentpool</span><span class=\"token punctuation\">:</span> default\n\n<span class=\"token comment\"># Airflow executor</span>\n<span class=\"token key atrule\">executor</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'KubernetesExecutor'</span>\n\n<span class=\"token comment\"># Environment variables for all airflow containers</span>\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ENVIRONMENT\n    <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> dev\n\n<span class=\"token key atrule\">extraEnv</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n  - name: AIRFLOW__CORE__DEFAULT_TIMEZONE\n    value: 'Asia/Seoul'</span>\n\n<span class=\"token comment\"># Configuration for postgresql subchart</span>\n<span class=\"token comment\"># Not recommended for production! Instead, spin up your own Postgresql server and use the `data`</span>\n<span class=\"token comment\"># attribute in this yaml file.</span>\n<span class=\"token key atrule\">postgresql</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token comment\"># Enable pgbouncer.</span>\n<span class=\"token comment\"># See https://airflow.apache.org/docs/helm-chart/stable/production-guide.html#pgbouncer</span>\n<span class=\"token key atrule\">pgbouncer</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> true<span class=\"token punctuation\">></span></code></pre></div>\n<h2 id=\"dag를-동기화하기-위한-gitsync\" style=\"position:relative;\"><a href=\"#dag%EB%A5%BC-%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-gitsync\" aria-label=\"dag를 동기화하기 위한 gitsync permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DAG를 동기화하기 위한 GitSync</h2>\n<p>이제 DAG와 Github Repo를 동기화 해주어야 한다. 그 과정에서 SSH 인증키를 만들고 GIt hub 저장소에 배포키로 추가하면 된다.</p>\n<h3 id=\"ssh-key-생성\" style=\"position:relative;\"><a href=\"#ssh-key-%EC%83%9D%EC%84%B1\" aria-label=\"ssh key 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ssh-key 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">ssh-keygen -t rsa -b 4096 -C &quot;your@email.com&quot;\n\ncat ~/.ssh/airflowsshkey.pub</code></pre></div>\n<h3 id=\"namespace-생성-후-valuesyaml-마무리\" style=\"position:relative;\"><a href=\"#namespace-%EC%83%9D%EC%84%B1-%ED%9B%84-valuesyaml-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"namespace 생성 후 valuesyaml 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>namespace 생성 후 values.yaml 마무리</h3>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">kubectl create namespace airflow\n\nkubectl create secret generic -n airflow airflow-git-ssh-secret \\\n\t--from-file=gitSshKey=$HOME/.ssh/airflowsshkey</code></pre></div>\n<p>그리고 아래 내용을 values.yaml 파일에 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">gitSync</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> &lt;본인 Repo ssh<span class=\"token punctuation\">></span>\n    <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main\n    <span class=\"token key atrule\">rev</span><span class=\"token punctuation\">:</span> HEAD\n    <span class=\"token key atrule\">depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token key atrule\">maxFailures</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token key atrule\">subPath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'dags'</span>\n    <span class=\"token key atrule\">sshKeySecret</span><span class=\"token punctuation\">:</span> airflow<span class=\"token punctuation\">-</span>git<span class=\"token punctuation\">-</span>ssh<span class=\"token punctuation\">-</span>secret\n    <span class=\"token key atrule\">knownHosts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n      github.com ssh-rsa &lt;secret key></span></code></pre></div>\n<p>위 내용은 main 브렌치의 dags 폴더를 동기화하겠다는 단순한 뜻이다. <br>\n다만, 여기서 주의할 점이 ssh-rsa 다음에 오는 key는 방금 생성한 키가 아니라 GitHub 서버의 호스트 키를 말하는 것이다. 아래 공식문서를 잘 살펴보자</p>\n<ul>\n<li><a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\">GitHub의 SSH 키 Fingerprints 공식 문서</a></li>\n</ul>\n<h2 id=\"blob을-사용한-로그-저장\" style=\"position:relative;\"><a href=\"#blob%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B7%B8-%EC%A0%80%EC%9E%A5\" aria-label=\"blob을 사용한 로그 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>blob을 사용한 로그 저장</h2>\n<p>다음은 로그 저장소를 설정하는 것이다. 보통 pv 및 pvc를 사용해서 저장한다. 나는 airflow라는 디렉토리를 만들어서 저장했다.</p>\n<h3 id=\"pv-logsyaml\" style=\"position:relative;\"><a href=\"#pv-logsyaml\" aria-label=\"pv logsyaml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pv-logs.yaml</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolume\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pv<span class=\"token punctuation\">-</span>airflow<span class=\"token punctuation\">-</span>logs\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> local\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">capacity</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 5Gi\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">persistentVolumeReclaimPolicy</span><span class=\"token punctuation\">:</span> Retain <span class=\"token comment\"># If set as \"Delete\" container would be removed after pvc deletion</span>\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> azureblob<span class=\"token punctuation\">-</span>fuse<span class=\"token punctuation\">-</span>premium\n  <span class=\"token key atrule\">mountOptions</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>o allow_other\n    <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>file<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>timeout<span class=\"token punctuation\">-</span>in<span class=\"token punctuation\">-</span>seconds=120\n  <span class=\"token key atrule\">csi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> blob.csi.azure.com\n    <span class=\"token key atrule\">readOnly</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">volumeHandle</span><span class=\"token punctuation\">:</span> airflow<span class=\"token punctuation\">-</span>logs<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n    <span class=\"token key atrule\">volumeAttributes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">resourceGroup</span><span class=\"token punctuation\">:</span> airflowrg\n      <span class=\"token key atrule\">storageAccount</span><span class=\"token punctuation\">:</span> airflowairflowsa\n      <span class=\"token key atrule\">containerName</span><span class=\"token punctuation\">:</span> airflow<span class=\"token punctuation\">-</span>logs\n    <span class=\"token key atrule\">nodeStageSecretRef</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> storage<span class=\"token punctuation\">-</span>account<span class=\"token punctuation\">-</span>credentials\n      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> airflow</code></pre></div>\n<h3 id=\"pvc-logsyaml\" style=\"position:relative;\"><a href=\"#pvc-logsyaml\" aria-label=\"pvc logsyaml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pvc-logs.yaml</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pvc<span class=\"token punctuation\">-</span>airflow<span class=\"token punctuation\">-</span>logs\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> azureblob<span class=\"token punctuation\">-</span>fuse<span class=\"token punctuation\">-</span>premium\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 5Gi\n  <span class=\"token key atrule\">volumeName</span><span class=\"token punctuation\">:</span> pv<span class=\"token punctuation\">-</span>airflow<span class=\"token punctuation\">-</span>logs</code></pre></div>\n<p>PersistentVolume과 PersistentVolumeClaim을 프로비저닝 하는 코드를 짰으므로 당연히 해당 리소스에 대해서도 secret을 정의해주어야 한다. 아래 코드로 간단하게 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">STORAGE_ACCOUNT_KEY</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>az storage account keys list <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-g</span> airflowrg <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-n</span> airflowairflowlogs <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">--query</span> <span class=\"token string\">'[0]'</span>.value <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-o</span> tsv<span class=\"token variable\">)</span></span>\n\nkubectl create secret generic <span class=\"token parameter variable\">-n</span> airflow storage-account-credentials <span class=\"token punctuation\">\\</span>\n\t--from-literal <span class=\"token assign-left variable\">azurestorageaccountname</span><span class=\"token operator\">=</span>airflowairflowsa <span class=\"token punctuation\">\\</span>\n\t--from-literal <span class=\"token assign-left variable\">azurestorageaccountkey</span><span class=\"token operator\">=</span><span class=\"token variable\">$STORAGE_ACCOUNT_KEY</span> <span class=\"token punctuation\">\\</span>\n\t<span class=\"token parameter variable\">--type</span><span class=\"token operator\">=</span>Opaque</code></pre></div>\n<p>그리고 적용해주자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-n</span> airflow <span class=\"token parameter variable\">-f</span> airflow/pv-logs.yaml\nkubectl apply <span class=\"token parameter variable\">-n</span> airflow <span class=\"token parameter variable\">-f</span> airflow/pvc-logs.yaml</code></pre></div>\n<h2 id=\"valuesyaml-파일-마무리\" style=\"position:relative;\"><a href=\"#valuesyaml-%ED%8C%8C%EC%9D%BC-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"valuesyaml 파일 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>values.yaml 파일 마무리</h2>\n<p>이제 설정 파일인 values.yaml파일을 마무리 해줄거다 여기서 logGroomerSidecar 부분은 전부 비활성화 처리 했다 Terraform 코드에서 blob 컨테이너에 대한 로그 정리 정책을 이미 정의했기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">logs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">persistence</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">existingClaim</span><span class=\"token punctuation\">:</span> pvc<span class=\"token punctuation\">-</span>airflow<span class=\"token punctuation\">-</span>logs\n    <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> azureblob<span class=\"token punctuation\">-</span>fuse<span class=\"token punctuation\">-</span>premium\n\n<span class=\"token comment\"># We disable the log groomer sidecar because we use Azure Blob Storage for logs,</span>\n<span class=\"token comment\"># where a lifecycle policy is already set</span>\n<span class=\"token key atrule\">triggerer</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">logGroomerSidecar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n<span class=\"token key atrule\">scheduler</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">logGroomerSidecar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n<span class=\"token key atrule\">workers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">logGroomerSidecar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></code></pre></div>\n<h2 id=\"airflow-설치\" style=\"position:relative;\"><a href=\"#airflow-%EC%84%A4%EC%B9%98\" aria-label=\"airflow 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>airflow 설치</h2>\n<p>이제 설치 하자!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">helm repo <span class=\"token function\">add</span> apache-airflow https://airflow.apache.org\n\nhelm <span class=\"token function\">install</span> airflow apache-airflow/airflow <span class=\"token parameter variable\">-n</span> airflow <span class=\"token parameter variable\">-f</span> airflow/values.yaml <span class=\"token parameter variable\">--debug</span>\n\nkubectl port-forward svc/airflow-webserver <span class=\"token number\">8080</span>:8080 <span class=\"token parameter variable\">-n</span> airflow</code></pre></div>\n<h2 id=\"test-build를-위해-acr에-이미지-등록하기\" style=\"position:relative;\"><a href=\"#test-build%EB%A5%BC-%EC%9C%84%ED%95%B4-acr%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\" aria-label=\"test build를 위해 acr에 이미지 등록하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>test build를 위해 ACR에 이미지 등록하기</h2>\n<p>우선 Hello World!가 출력되는 매우 간단한 컨테이너를 만들어 ACR에 업로드 해보자</p>\n<h3 id=\"dockerfile\" style=\"position:relative;\"><a href=\"#dockerfile\" aria-label=\"dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DockerFile</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> alpine:latest</span>\n\n<span class=\"token comment\"># The command to run when the container starts</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"echo\"</span>, <span class=\"token string\">\"hello world\"</span>]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">docker build -t example .\ndocker run example</code></pre></div>\n<h3 id=\"docker-buildsh\" style=\"position:relative;\"><a href=\"#docker-buildsh\" aria-label=\"docker buildsh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker-build.sh</h3>\n<p>그 다음 acr에 로그인을 해준 후 ACR Portal에 있는 acr_id와 master key를 가져와준다. Portal에 가면 쉽게 확인이 가능하다.!</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">az acr login --name airflowacregistry</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token assign-left variable\">acr_id</span><span class=\"token operator\">=</span><span class=\"token string\">\"airflowacregistry.azurecr.io\"</span>\n<span class=\"token assign-left variable\">image_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"aksdag\"</span> <span class=\"token comment\"># could be any image name</span>\n<span class=\"token function\">docker</span> login <span class=\"token string\">\"<span class=\"token variable\">$acr_id</span>\"</span> <span class=\"token parameter variable\">-u</span> <span class=\"token string\">'&lt;ACR리소스 name>'</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"&lt;ACR master key>\"</span>\n<span class=\"token function\">docker</span> build <span class=\"token parameter variable\">--tag</span> <span class=\"token string\">\"<span class=\"token variable\">$acr_id</span>/<span class=\"token variable\">$image_name</span>:latest\"</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">docker</span> push <span class=\"token string\">\"<span class=\"token variable\">$acr_id</span>/<span class=\"token variable\">$image_name</span>:latest\"</span></code></pre></div>\n<p>아래 명령어로 이미지가 잘 ACR에 등록되었는지 확인도 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">az acr repository list --name airflowacregistry --output table</code></pre></div>\n<h2 id=\"airflow에서-첫-번째-dag-실행\" style=\"position:relative;\"><a href=\"#airflow%EC%97%90%EC%84%9C-%EC%B2%AB-%EB%B2%88%EC%A7%B8-dag-%EC%8B%A4%ED%96%89\" aria-label=\"airflow에서 첫 번째 dag 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Airflow에서 첫 번째 DAG 실행</h2>\n<p>일단 아까전에 gitSync에서 적었던 git링크를 기억하는가?? 그 레포의 다음 경로에 들어가서 airflowsshkey.pub 안에 있는 키를 deploy key에 등록해준다.</p>\n<ul>\n<li><code class=\"language-text\">Setting</code> -> <code class=\"language-text\">DeployKey</code></li>\n</ul>\n<h3 id=\"dags-폴더에-dag-저장\" style=\"position:relative;\"><a href=\"#dags-%ED%8F%B4%EB%8D%94%EC%97%90-dag-%EC%A0%80%EC%9E%A5\" aria-label=\"dags 폴더에 dag 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dags 폴더에 DAG 저장</h3>\n<p>ACR에 저장 했던 이미지를 빌드하는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">from</span> airflow <span class=\"token keyword\">import</span> DAG\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>kubernetes_pod_operator <span class=\"token keyword\">import</span> KubernetesPodOperator\n\ndefault_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"retries\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"start_date\"</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"image_pull_policy\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Always\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> DAG<span class=\"token punctuation\">(</span>\n    dag_id<span class=\"token operator\">=</span><span class=\"token string\">\"simple_kubernetes_dag\"</span><span class=\"token punctuation\">,</span>\n    schedule_interval<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n    default_args<span class=\"token operator\">=</span>default_args<span class=\"token punctuation\">,</span>\n    catchup<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    tags<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    max_active_runs<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dag<span class=\"token punctuation\">:</span>\n    simple_task <span class=\"token operator\">=</span> KubernetesPodOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">\"simple_echo_task\"</span><span class=\"token punctuation\">,</span>\n        image<span class=\"token operator\">=</span><span class=\"token string\">\"airflowacregistry.azurecr.io/example:latest\"</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">=</span><span class=\"token string\">\"simple-airflow-task\"</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<p>짠! 그럼 이제 아래 처럼 내가 만든 DAG가 무사히 airflow 내에 안착된것을 알 수 있다.ㅎㅎ</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQMLIOQC3j8iRZogFySybvL_Ae6JgpuQQ6AF8Oali7Wm9L0?width=1024\" alt=\"airflow\">\n</div>\n<p>DAG를 수동으로 트리거 하고 다음 메세지 까지 떴다면 완료다:)</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span><span class=\"token number\">2024</span>-08-05, 08:36:51 UTC<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>pod_manager.py:235<span class=\"token punctuation\">}</span> INFO - hello world</code></pre></div>\n<h2 id=\"마무리-하며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC-%ED%95%98%EB%A9%B0\" aria-label=\"마무리 하며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리 하며..</h2>\n<p>완성했다!! 사실 더 고도화 하고 싶었는데 일단 현재 Azure Function 만드는데도 여러가지 이슈가 있기에 나중에 기회가 되면 argo CD 등으로 CI/CD 하는 것도 해보려구 한다. 점점 데엔에서 Devops 쪽을 건드리는 기분이지만 아무렴 재밌는데 뭐 어쩌겠는가</p>\n<p>위 코드에 대한 정보는 아래 나의 깃허브에 있다:) <br>\n<a href=\"https://github.com/StatisticsFox/terraform-aks-cluster-setup\">terraform-aks-cluster-setup</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">들어가기에 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#prerequisites\">Prerequisites</a></p>\n</li>\n<li>\n<p><a href=\"#terraform%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-aks-%EA%B5%AC%EC%84%B1\">Terraform을 이용한 AKS 구성</a></p>\n<ul>\n<li><a href=\"#providerstf\">providers.tf</a></li>\n<li><a href=\"#variablestf\">variables.tf</a></li>\n<li><a href=\"#maintfvals\">main.tfvals</a></li>\n<li><a href=\"#maintf\">main.tf</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#azure-%EC%9D%B8%ED%94%84%EB%9D%BC-%EB%B0%B0%ED%8F%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A3%BC%EC%B2%B4-%EC%83%9D%EC%84%B1\">Azure 인프라 배포를 위한 서비스 주체 생성</a></p>\n</li>\n<li>\n<p><a href=\"#aks-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%B0%B0%ED%8F%AC\">AKS 클러스터 배포</a></p>\n</li>\n<li>\n<p><a href=\"#helm%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-airflow-%EC%84%A4%EC%B9%98\">Helm을 사용하여 Airflow 설치</a></p>\n<ul>\n<li><a href=\"#valuesyaml\">values.yaml</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dag%EB%A5%BC-%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-gitsync\">DAG를 동기화하기 위한 GitSync</a></p>\n<ul>\n<li><a href=\"#ssh-key-%EC%83%9D%EC%84%B1\">ssh-key 생성</a></li>\n<li><a href=\"#namespace-%EC%83%9D%EC%84%B1-%ED%9B%84-valuesyaml-%EB%A7%88%EB%AC%B4%EB%A6%AC\">namespace 생성 후 values.yaml 마무리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#blob%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B7%B8-%EC%A0%80%EC%9E%A5\">blob을 사용한 로그 저장</a></p>\n<ul>\n<li><a href=\"#pv-logsyaml\">pv-logs.yaml</a></li>\n<li><a href=\"#pvc-logsyaml\">pvc-logs.yaml</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#valuesyaml-%ED%8C%8C%EC%9D%BC-%EB%A7%88%EB%AC%B4%EB%A6%AC\">values.yaml 파일 마무리</a></p>\n</li>\n<li>\n<p><a href=\"#airflow-%EC%84%A4%EC%B9%98\">airflow 설치</a></p>\n</li>\n<li>\n<p><a href=\"#test-build%EB%A5%BC-%EC%9C%84%ED%95%B4-acr%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\">test build를 위해 ACR에 이미지 등록하기</a></p>\n<ul>\n<li><a href=\"#dockerfile\">DockerFile</a></li>\n<li><a href=\"#docker-buildsh\">docker-build.sh</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#airflow%EC%97%90%EC%84%9C-%EC%B2%AB-%EB%B2%88%EC%A7%B8-dag-%EC%8B%A4%ED%96%89\">Airflow에서 첫 번째 DAG 실행</a></p>\n<ul>\n<li><a href=\"#dags-%ED%8F%B4%EB%8D%94%EC%97%90-dag-%EC%A0%80%EC%9E%A5\">dags 폴더에 DAG 저장</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC-%ED%95%98%EB%A9%B0\">마무리 하며..</a></p>\n</li>\n</ul>\n</div>","excerpt":"들어가기에 앞서 이번에 RAG를 이용한 채용정보 챗봇 구축을 위해 Azure 쿠버네티스 환경(통칭 AKS)에서 ETL 프로젝트를 해보기 위해 아래와 같은 계획을 짰다. 프로젝트 환경에 airflow를 띄우고 주기적인 크롤링 SPARK를 통한 데이터 마트 구축 GPT-3 토크나이저를 이용한 데이터 임베딩 크로마 DB에 데이터 적제 이거 할 생각에 잔뜩 기대하고 허겁지겁 일단 AKS 위에 쿠버네티스를 올린 후 pod에 airflow를 올리고 DAG를 GIT으로 관리할 수 있게끔 구성했다. ACR(Azure Container Registry)도 만들어 도커로 환경 배포까지 자동화를 해놨으나 결국 무산 되었다…\n그 이유는 바로 비용문제이다. 일단 내가 개발한 크롤러로 데이터를 수집하면 데이터의 형태가 다음과 같다. 여기서 문제가 바로 ‘detail_data’다. 이 데이터를 , , 그리고 프롬프트만해도 이 엄청나다. 근데 해당 기능은 필수적인 기능이라 데이터 엔지니어링 파트에서 비용 절감…","frontmatter":{"date":"August 11, 2024","title":"Terraform으로 AKS에 airflow 띄우고 git으로 DAG 관리하기","categories":"Data_Engineering","author":"최지혁","emoji":"🍤"},"fields":{"slug":"/Data Engineering/Terraform으로 AKS에 airflow 띄우고 git으로 DAG 관리하기/"}},"next":{"id":"86485b27-e91e-508b-8973-c55fb988ce08","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서..</h2>\n<p>요새는 학교 과제를 위한 따릉이 대시보드가 아닌 한이음 ICT 공모전을 위한 따릉이 실시간 대시보드 구축을 진행중이다. 원래는 카프카로 데이터를 producing 하자마자 스피드레이어를 구축해서 대시보드에 마이크로 배치 형태로 실시간 대시보드를 구축했다면 이번에는 대시보드를 더 고도화하기 위해 Spark를 이용해 한번 형태 변환을 하고 S3에 적제하는 과정을 거져봤다.</p>\n<p>즉, 아키텍쳐의 변화가 다음과 같다.</p>\n<h4 id=\"이전-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"이전 아키텍쳐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전 아키텍쳐</h4>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/UQOSHPiMvlbtIICdzgAAAAAAALbDIYVRTxIVsFE?width=2400&amp;height=868\" alt=\"아키텍쳐\">\n</div>\n<h4 id=\"변경-후-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD-%ED%9B%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"변경 후 아키텍쳐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경 후 아키텍쳐</h4>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNJRKls7yGMSJpXC5w6SHexAcdcMmCo1u9rPOT7osYAtOQ?width=2918&amp;height=1186\" alt=\"아키텍쳐\">\n</div>\n<p>좀 많이 힘써봤다. 단순하게 실시간 모니터링만 하는 대시보드는 식상하기도 하고 솔직히 요즘 같이 Chatgpt가 발달한 시대에 그 정도 못만드는 사람 없을 것이다. 다만 이렇게 클라우안에서 다양한 툴과 함께 서비스를 제작한다는 것은 또 다른 개념이라 그 의미가 크다. 나는 위 아키텍쳐에서 <font color=\"#c00000\">카프카로부터 데이터를 실시간으로 받아 SPARK에서 변환 후 S3에 실시간으로 적제하는 Spark-Streaming 코드</font>를 이번에 작성해봤다.<del>(사실 아직 개발 중!)</del> <br>\n그럼 이제 시작해보자</p>\n<div align=\"center\">\n    <img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&amp;authkey=%21AInaQqp_g1hhKd0&amp;width=564&amp;height=311\" alt=\"시작해보자\">\n</div>\n<h2 id=\"sql-vs-dataframeapi-vs-무지성-코딩\" style=\"position:relative;\"><a href=\"#sql-vs-dataframeapi-vs-%EB%AC%B4%EC%A7%80%EC%84%B1-%EC%BD%94%EB%94%A9\" aria-label=\"sql vs dataframeapi vs 무지성 코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL VS DataframeAPI VS 무지성 코딩</h2>\n<p>자 SPARK를 파이썬으로 작성할 경우 많은 선택지가 있으니… 바로 spark_sql 혹은 dataframe_api 둘 중 무었을 쓸지다.<a href=\"https://statisticsfox.notion.site/Spark-RDD-DataFrame-SQL-77b20bc7a90d4c709a002ad75542b396?pvs=4\">(이 둘 간의 비교는 이미 노션에 정리 함. 참고!)</a>\n<br></p>\n<p>무지성 코딩은 그럼 왜 넣었냐! 내가 처음에 무지성으로 코딩을 했었다. 바로 collect()함수로만 모든 집계를 처리한것이다.😱😱 그럼 절대 안된다.</p>\n<blockquote>\n<p>spark에는 Driver와 excutor가 있는데 다음과 같은 역할을 함. <br></p>\n<ul>\n<li>driver: 일감(TASK)이 들어오면 excuter에게 일감을 던져준다. <br></li>\n<li>excuter: 들어온 일을 처리하고 일한 결과를 driver에게 반환하는 역할을 한다.</li>\n</ul>\n</blockquote>\n<p>근데 collect()함수로만 모든 집계를 처리한다는 것은 driver가 모든 일을 다하도록 코딩한다는 뜻이다. 즉, 사장님이 알바 뽑았는데 알바 놔두고 자기 혼자 일 다하는 꼴이다.💀 이러면 병렬 연산의 장점도 없을 뿐더러 SPARK의 장점들이 아무짝에도 쓸모 없어져 버린다.<del>(근데 본인은 초반에 아런 멍청한 짓을 저지름ㅋㅅㅋ)</del> <br></p>\n<p>그래서 우리는 SQL엔진 혹은 Dataframe api를 활용해서 데이터를 집계 해야한다. 또한 이 둘을 사용하면 카탈리스트 옵티마이저라고 Spark 내에서 최적화 및 계획을 수립해 주기에 최선의 결과와 속도를 얻을 수 있다. 자세한 내용은 위 링크를 참고하자.</p>\n<h2 id=\"그렇게-선정된-sql\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EA%B2%8C-%EC%84%A0%EC%A0%95%EB%90%9C-sql\" aria-label=\"그렇게 선정된 sql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇게 선정된 SQL</h2>\n<p>나는  Spark SQL을 사용하기로 했다. 사실 나는 SQL 보다는 DataFrameAPI를 더 선호한다. 그 이유는 다음과 같다.</p>\n<ol>\n<li>DataFrame api는 오류가 났을 경우 컴파일 하기 용이하다.</li>\n<li>현재 변환하려고 하는 형식은 크게 복잡한 구조가 아니기에 엄청 간단하게 질의할 수 있다. <br></li>\n<li>SQL은 쿼리를 짜도 에러가 나면 그냥 쿼리에 문제가 있다고 알려주지 쿼리 어디서 문제가 있는지 알려주지 않는다.</li>\n</ol>\n<p>정도 되시겠다. 내가 Spark에서 쿼리를 기이이일게 짰을때 오류가 나면 “그냥 쿼리에 오류가 있다.”정도만 표시 되기에 쿼리가 길면 컴파일이 어려워진다. 다만 데이터 프레임은 어디서 오류가 났는지 컴파일이 비교적 명확하고 그렇기에 테스크 별로 모듈화하기가 엄청 좋다. <br>\n다만 이번에는 나는 1시간 단위로 집계를 해야 한다. SQL에는 window라는 기능이 있는데 이를 1hour로 설정해주면 내가 수동으로 비교해주지 않아도 자기내들 알아서 1시간 단위로 데이터를 집계해 준다.</p>\n<h2 id=\"코드를-살펴보자\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\" aria-label=\"코드를 살펴보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드를 살펴보자</h2>\n<h3 id=\"무지성-코딩\" style=\"position:relative;\"><a href=\"#%EB%AC%B4%EC%A7%80%EC%84%B1-%EC%BD%94%EB%94%A9\" aria-label=\"무지성 코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>무지성 코딩</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update_state</span><span class=\"token punctuation\">(</span>batch_df<span class=\"token punctuation\">,</span> batch_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> state<span class=\"token punctuation\">,</span> current_hour<span class=\"token punctuation\">,</span> batch_accumulator\n\n    now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>minute<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> microsecond<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> current_hour <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        current_hour <span class=\"token operator\">=</span> now\n\n    <span class=\"token comment\"># 새로운 시간 창에 들어서면 이전 데이터 집계 및 초기화</span>\n    <span class=\"token keyword\">if</span> now <span class=\"token operator\">!=</span> current_hour<span class=\"token punctuation\">:</span>\n    \n        <span class=\"token keyword\">if</span> batch_accumulator<span class=\"token punctuation\">:</span>\n            result_df <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>createDataFrame<span class=\"token punctuation\">(</span>batch_accumulator<span class=\"token punctuation\">,</span> schema<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"event_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            hourly_summary <span class=\"token operator\">=</span> result_df<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span>\n                F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_return\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span><span class=\"token string\">\"hour\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>lit<span class=\"token punctuation\">(</span>current_hour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            previous_hour <span class=\"token operator\">=</span> current_hour <span class=\"token operator\">-</span> timedelta<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n            year <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y'</span><span class=\"token punctuation\">)</span>\n            month <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%m'</span><span class=\"token punctuation\">)</span>\n            day <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%d'</span><span class=\"token punctuation\">)</span>\n            hour <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%H'</span><span class=\"token punctuation\">)</span>\n\n            bucket_name <span class=\"token operator\">=</span> <span class=\"token string\">'ddareungidatabucket'</span>\n            folder_name <span class=\"token operator\">=</span> <span class=\"token string\">'hourly_summary'</span>\n            path <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"s3a://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>folder_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>year<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>month<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>day<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>hour<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n            hourly_summary<span class=\"token punctuation\">.</span>repartition<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"overwrite\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parquet<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\n            hourly_summary<span class=\"token punctuation\">.</span>orderBy<span class=\"token punctuation\">(</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            batch_accumulator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        current_hour <span class=\"token operator\">=</span> now\n\n    batch_data <span class=\"token operator\">=</span> batch_df<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\n    changes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> batch_data<span class=\"token punctuation\">:</span>\n        station_id <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>stationId\n        current_count <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>parkingBikeTotCnt\n        event_time <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>event_time\n\n        <span class=\"token keyword\">if</span> station_id <span class=\"token keyword\">in</span> state<span class=\"token punctuation\">:</span>\n            previous_count <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>station_id<span class=\"token punctuation\">]</span>\n            change <span class=\"token operator\">=</span> current_count <span class=\"token operator\">-</span> previous_count\n            <span class=\"token keyword\">if</span> change <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                batch_accumulator<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">elif</span> change <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>change<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                batch_accumulator<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>change<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            batch_accumulator<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        state<span class=\"token punctuation\">[</span>station_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current_count\n\n\n    <span class=\"token keyword\">if</span> changes<span class=\"token punctuation\">:</span>\n        result_df <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>createDataFrame<span class=\"token punctuation\">(</span>changes<span class=\"token punctuation\">,</span> schema<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"event_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        result_df<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위에는 내가 무지성으로 코딩한 코드다 무지성으로 했다는 뜻은 그냥 기능에 충실하게 <font color=\"#c00000\">확장성 고려하지 않고 내가 아는 파이썬 코드대로 짰다는 뜻</font>이다.(<del>대충 의식의 흐름대로 짰다는 것</del>) 지금 보면 1시간마다 데이터를 쌓아뒀다가 집계를 해야하기 때문에 상태 데이터를 전역변수로 설정해두고 시간창 즉 시간이 변경되지 않으면 계속해서 데이터를 업데이트 시간이 변경되면 한시간이 지났다는 의미이므로 데이터 집계 및 전송 및 상태창 초기화 를 하고 있다.</p>\n<p>근데 자 여기서 보자 지금 보면 데이터를 변환하기 위해 데이터를 읽어 들이는 부분이 아래 코드처럼 묶여있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">batch_data <span class=\"token operator\">=</span> batch_df<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>아까 말했듯이 이는 데이터를 드라이버 노드로 수집하는 것으로 기껏 구축한 Spark의 최장점인 병렬처리의 이점을 쓰레기통에 박아넣은 행위다.</p>\n<p>그래서 코드를 for문과 if문으로만 짜둔 이름하여 더러운 코드가 완성이 되었다.</p>\n<h3 id=\"spark_sql\" style=\"position:relative;\"><a href=\"#spark_sql\" aria-label=\"spark_sql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spark_SQL</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update_state</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> batch_df<span class=\"token punctuation\">,</span> batch_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>minute<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> microsecond<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        joined_df <span class=\"token operator\">=</span> batch_df<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>state_df<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">\"left\"</span><span class=\"token punctuation\">)</span>\n\n        changes_df <span class=\"token operator\">=</span> joined_df<span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>coalesce<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>lit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        new_state_df <span class=\"token operator\">=</span> changes_df<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>\n            F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>state_df <span class=\"token operator\">=</span> new_state_df\n\n        hourly_summary <span class=\"token operator\">=</span> changes_df<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>\n            F<span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">(</span><span class=\"token string\">\"event_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1 hour\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stationId\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span>\n            F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_return\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"window.start\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"window.end\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"total_rental\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"total_return\"</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> hourly_summary</code></pre></div>\n<p>너무나도 깔끔(?)해진 코드를 볼 수 있다. 먼저 바뀐점을 알아보자. 처음에 배치 데이터와 기존 상태 데이터를 leftjoin 하는데 우선 초기에 조인 시 오류를 방지하기 위해 <code class=\"language-text\">previous_parkingBikeTotCnt</code>가 0인 경우 <code class=\"language-text\">change</code>, <code class=\"language-text\">return</code>, <code class=\"language-text\">rental</code> 값을 0으로 설정해준다.  <br><br> 그리고 <code class=\"language-text\">parkingBikeTotCnt</code> - <code class=\"language-text\">previous_parkingBikeTotCnt</code> = <code class=\"language-text\">change</code>로 둔 뒤에 change 값이 양수이면 return에 change 값이 음수이면 rental에 저장 하고 그 이외는 0으로 저장한다.\n<br><br> 그렇게 데이터가 들어올때 마다 이런 연산이 반복되고 1시간이라는 window 즉 시간창이 지나게 되면 <code class=\"language-text\">groupBy</code>연산이 실행되면서 아래와 같은 한시간 집계 분에 해당하는 데이터 프레임이 완성된다.</p>\n<table>\n<thead>\n<tr>\n<th>window.start</th>\n<th>window.end</th>\n<th>stationId</th>\n<th>total_rental</th>\n<th>total_return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station1</td>\n<td>20</td>\n<td>23</td>\n</tr>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station2</td>\n<td>3</td>\n<td>6</td>\n</tr>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station3</td>\n<td>12</td>\n<td>9</td>\n</tr>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station4</td>\n<td>8</td>\n<td>7</td>\n</tr>\n</tbody>\n</table>\n<p>그리고 이제 해당 적제 결과를 S3 양동이에 차곡차곡 담아주면 된다.\n세부적인 코드는 아래에서 확인하자.ㅎㅎ\n<a href=\"https://github.com/StatisticsFox/Ddareungi-Spark\">https://github.com/StatisticsFox/Ddareungi-Spark</a></p>\n<h2 id=\"마무리하며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0\" aria-label=\"마무리하며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리하며</h2>\n<p>사실 Spark의 개념에 대해서는 알고 있었다. 근데 이게 코드를 짤때 어떤 영향을 미치는지는 몰랐다. Spark는 어떤거로 구성되어 있는지 특성은 뭔지 등을 알고 있었는데 이렇게 코드를 직접 짜는 과정에서 알고 있는 내용을 코드에 녹여내는건 확실히 프로젝트를 해보면서 몸으로 익혀야 하는 것 같다. 일단 현재는 30초마다 카프카에서 불러오고 있는데 점차 10초 5초로 줄이는 과정에서 메모리가 얼마나 부족해지는지 그럴 경우 얼마나 무엇을 더 최적화해야 하는지 등을 프로젝트를 마무리해 가면서 확인해볼 예정이다. 그때 다시 글로 돌아오겠따!!</p>","frontmatter":{"date":"August 03, 2024","title":"ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기","categories":"Data_Engineering","author":"최지혁","emoji":"😮"},"fields":{"slug":"/Data Engineering/ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://statisticsfox.github.io","comments":{"utterances":{"repo":"StatisticsFox/blog-comments"}}}}},"pageContext":{"slug":"/Data Engineering/Terraform으로 AKS에 airflow 띄우고 git으로 DAG 관리하기/","nextSlug":"/Data Engineering/ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}