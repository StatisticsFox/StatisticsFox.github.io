{"componentChunkName":"component---src-templates-blog-template-js","path":"/Data Engineering/nginx로 Spark, Yarn, kafkaui 구성하기/","result":{"data":{"cur":{"id":"a14666bd-b475-5985-9bcc-462ee1457782","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p>kafka 토픽관리나 메모리 관리 그리고 SPARK 메모리나 yarn 그리고 프로케테우스와 그라파나 등이 잘 작동하는지 모두 cli로 관리하는것은 명백한 한계가 존재한다. 너무 불편하고 그게 다 시간 자원 빼먹는거다. 때문에 Web ui로 관리하는 것이 보통 굉장히 편한데 사용하는 리소스와 툴이 늘어나는 만큼 많은 Web ui를 띄워야 한다.</p>\n<p>그동안 나는 포트 포워딩으로 모든 ui를 띄웠다. 이렇게 됐을 경우 단점은 <font color=\"#c00000\">인스턴스를 끄고 킬때마다 매번 포트포워딩을 수동으로 해주어야 한다는 것이다.</font>그동안은 한번에 포트 포워딩을 해주는 .sh파일을 길게 만들어서 해결해왔으나 점점 감당하기 어려운 수준까지 갔다. 때문에 도입한 것이 바로 우리 팀원 로컬 내부의 hosts에 ip주소와 도메인 이름을 지정해두고 nginx로 ui를 띄울 수 있도록 설정해두는 방향이었다.</p>\n<div align=\"center\">\n    <img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&amp;authkey=%21AInaQqp_g1hhKd0&amp;width=564&amp;height=311\" alt=\"시작해보자\">\n</div>\n<h2 id=\"nginx-설정\" style=\"position:relative;\"><a href=\"#nginx-%EC%84%A4%EC%A0%95\" aria-label=\"nginx 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nginx 설정</h2>\n<h3 id=\"public-nat에-nginx-설치하여-http-rewrite할-수-있도록-설정\" style=\"position:relative;\"><a href=\"#public-nat%EC%97%90-nginx-%EC%84%A4%EC%B9%98%ED%95%98%EC%97%AC-http-rewrite%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%EC%84%A4%EC%A0%95\" aria-label=\"public nat에 nginx 설치하여 http rewrite할 수 있도록 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>public-nat에 nginx 설치하여 http rewrite할 수 있도록 설정</h3>\n<p>먼저 nginx를 public-nat에 설치해 주고 nginx.conf를 관리자 권한으로 수정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ec2-user$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> nginx\nec2-user$ <span class=\"token builtin class-name\">cd</span> /etc/nginx\nec2-user$ <span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> nginx.conf</code></pre></div>\n<p>그 후 include 바로 아래 server 블록 기존 내용 삭제 후 아래 resolver와 server 블록 삽입하면 된다. 간편함을 위해 우선 kafka web ui만 들고왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># include /etc/nginx/conf.d/*.conf; &lt;- 요 아래에 작성</span>\n\n    resolver <span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">;</span>\n \t\tserver <span class=\"token punctuation\">{</span>\n        listen <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n        server_name kafka03<span class=\"token punctuation\">;</span>\n        location / <span class=\"token punctuation\">{</span>\n            proxy_pass http://<span class=\"token operator\">&lt;</span>private IP address<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>port<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 실제 백엔드 주소로 변경</span>\n            proxy_set_header Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Forwarded-Proto <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 양식으로 모든 포트를 다 지정해 주면 된다. 지금 위 양식으로 conf에 지정하면 server_name에 지정한 이름이 바로 도메인 이름이다. 나중에 로컬에도 적용해줄 예정이니 잘 기억해주자.</p>\n<h2 id=\"nginx-서비스-시작\" style=\"position:relative;\"><a href=\"#nginx-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EC%9E%91\" aria-label=\"nginx 서비스 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nginx 서비스 시작</h2>\n<h3 id=\"nginxconf-작성-완료되면-nginx-서비스-시작\" style=\"position:relative;\"><a href=\"#nginxconf-%EC%9E%91%EC%84%B1-%EC%99%84%EB%A3%8C%EB%90%98%EB%A9%B4-nginx-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EC%9E%91\" aria-label=\"nginxconf 작성 완료되면 nginx 서비스 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nginx.conf 작성 완료되면 nginx 서비스 시작</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ec2-user$ <span class=\"token function\">sudo</span> systemctl start nginx\nec2-user$ <span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> nginx</code></pre></div>\n<h3 id=\"로컬의-etchosts-를-이용하여-resolve-하도록-추가-패키지-설치\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC%EC%9D%98-etchosts-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-resolve-%ED%95%98%EB%8F%84%EB%A1%9D-%EC%B6%94%EA%B0%80-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"로컬의 etchosts 를 이용하여 resolve 하도록 추가 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬의 /etc/hosts 를 이용하여 resolve 하도록 추가 패키지 설치</h3>\n<p>다음은 필요한 패키지를 하나 더 설치해 줄거다. <code class=\"language-text\">dnsmasq</code>라는 건데 경량 DNS 포워더 및 DHCP 서버다. 이걸로 로컬 호스트 파일(/etc/hosts)을 사용하여 도메인 이름을 IP 주소로 변환할 수 있다. 우리는 로컬에서 접속할 것이기 때문에 ip주솔르 변환해주는 핵심 패키지이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ec2-user$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> dnsmasq\nec2-user$ <span class=\"token function\">sudo</span> systemctl start dnsmasq\nec2-user$ <span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> dnsmasq</code></pre></div>\n<h3 id=\"서버-방화벽해제-및-영구저장\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EB%B0%A9%ED%99%94%EB%B2%BD%ED%95%B4%EC%A0%9C-%EB%B0%8F-%EC%98%81%EA%B5%AC%EC%A0%80%EC%9E%A5\" aria-label=\"서버 방화벽해제 및 영구저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 방화벽해제 및 영구저장</h3>\n<p>방화벽을 해제해주고</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ec2-user$ <span class=\"token function\">sudo</span> iptables –F\nec2-user$ <span class=\"token function\">sudo</span> <span class=\"token function\">service</span> iptables save</code></pre></div>\n<h2 id=\"로컬의-hosts-파일-수정\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC%EC%9D%98-hosts-%ED%8C%8C%EC%9D%BC-%EC%88%98%EC%A0%95\" aria-label=\"로컬의 hosts 파일 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬의 hosts 파일 수정</h2>\n<h3 id=\"로컬-환경의-hosts-파일에-호스트-등록\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC-%ED%99%98%EA%B2%BD%EC%9D%98-hosts-%ED%8C%8C%EC%9D%BC%EC%97%90-%ED%98%B8%EC%8A%A4%ED%8A%B8-%EB%93%B1%EB%A1%9D\" aria-label=\"로컬 환경의 hosts 파일에 호스트 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬 환경의 hosts 파일에 호스트 등록</h3>\n<p>/etc/hosts 파일에 아래 public-nat에 할당된 Elastic IP 확인 후 바로 입력해주도록 한다.\n본인 로컬의 /etc/hosts 밑에 아래처럼 적용해준다. 이름은 아까 nginx.conf에서 설정했던 server_name임을 잊지말자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>Elastic IP<span class=\"token punctuation\">}</span> kafka01 <span class=\"token comment\"># Elastic IP &lt;- public NAT IP</span>\n<span class=\"token punctuation\">{</span>Elastic IP<span class=\"token punctuation\">}</span> kafka02\n<span class=\"token punctuation\">{</span>Elastic IP<span class=\"token punctuation\">}</span> kafka03</code></pre></div>\n<h2 id=\"확인\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9D%B8\" aria-label=\"확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확인</h2>\n<p>그러면! 짠! 굳이 public nat의 ip 주소와 포트포워딩을 이용하지 않아도 이제는 언제든지 서버를 키면 설정해둔 도메인 이름으로 원하는 webui에 접속이 가능하다.</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNF77uX7iyER6tUXEZYC-EMAV7SE2amV7b9rzz7SGpVVKM?width=1024\" alt=\"kafka_web_ui\">\n</div>","excerpt":"들어가기에 앞서 kafka 토픽관리나 메모리 관리 그리고 SPARK 메모리나 yarn 그리고 프로케테우스와 그라파나 등이 잘 작동하는지 모두 cli로 관리하는것은 명백한 한계가 존재한다. 너무 불편하고 그게 다 시간 자원 빼먹는거다. 때문에 Web ui로 관리하는 것이 보통 굉장히 편한데 사용하는 리소스와 툴이 늘어나는 만큼 많은 Web ui를 띄워야 한다. 그동안 나는 포트 포워딩으로 모든 ui를 띄웠다. 이렇게 됐을 경우 단점은 인스턴스를 끄고 킬때마다 매번 포트포워딩을 수동으로 해주어야 한다는 것이다.그동안은 한번에 포트 포워딩을 해주는 .sh파일을 길게 만들어서 해결해왔으나 점점 감당하기 어려운 수준까지 갔다. 때문에 도입한 것이 바로 우리 팀원 로컬 내부의 hosts에 ip주소와 도메인 이름을 지정해두고 nginx로 ui를 띄울 수 있도록 설정해두는 방향이었다. nginx 설정 public-nat에 nginx 설치하여 http rewrite할 수 있도록 설정 먼저 ngin…","frontmatter":{"date":"August 18, 2024","title":"nginx로 Spark, Yarn, kafka 등 리소스 관리 Web ui 구성하기","categories":"Data_Engineering","author":"최지혁","emoji":"🏓"},"fields":{"slug":"/Data Engineering/nginx로 Spark, Yarn, kafkaui 구성하기/"}},"next":{"id":"86485b27-e91e-508b-8973-c55fb988ce08","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서..</h2>\n<p>요새는 학교 과제를 위한 따릉이 대시보드가 아닌 한이음 ICT 공모전을 위한 따릉이 실시간 대시보드 구축을 진행중이다. 원래는 카프카로 데이터를 producing 하자마자 스피드레이어를 구축해서 대시보드에 마이크로 배치 형태로 실시간 대시보드를 구축했다면 이번에는 대시보드를 더 고도화하기 위해 Spark를 이용해 한번 형태 변환을 하고 S3에 적제하는 과정을 거져봤다.</p>\n<p>즉, 아키텍쳐의 변화가 다음과 같다.</p>\n<h4 id=\"이전-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"이전 아키텍쳐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전 아키텍쳐</h4>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/UQOSHPiMvlbtIICdzgAAAAAAALbDIYVRTxIVsFE?width=2400&amp;height=868\" alt=\"아키텍쳐\">\n</div>\n<h4 id=\"변경-후-아키텍쳐\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD-%ED%9B%84-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"변경 후 아키텍쳐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경 후 아키텍쳐</h4>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNJRKls7yGMSJpXC5w6SHexAcdcMmCo1u9rPOT7osYAtOQ?width=2918&amp;height=1186\" alt=\"아키텍쳐\">\n</div>\n<p>좀 많이 힘써봤다. 단순하게 실시간 모니터링만 하는 대시보드는 식상하기도 하고 솔직히 요즘 같이 Chatgpt가 발달한 시대에 그 정도 못만드는 사람 없을 것이다. 다만 이렇게 클라우안에서 다양한 툴과 함께 서비스를 제작한다는 것은 또 다른 개념이라 그 의미가 크다. 나는 위 아키텍쳐에서 <font color=\"#c00000\">카프카로부터 데이터를 실시간으로 받아 SPARK에서 변환 후 S3에 실시간으로 적제하는 Spark-Streaming 코드</font>를 이번에 작성해봤다.<del>(사실 아직 개발 중!)</del> <br>\n그럼 이제 시작해보자</p>\n<div align=\"center\">\n    <img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&amp;authkey=%21AInaQqp_g1hhKd0&amp;width=564&amp;height=311\" alt=\"시작해보자\">\n</div>\n<h2 id=\"sql-vs-dataframeapi-vs-무지성-코딩\" style=\"position:relative;\"><a href=\"#sql-vs-dataframeapi-vs-%EB%AC%B4%EC%A7%80%EC%84%B1-%EC%BD%94%EB%94%A9\" aria-label=\"sql vs dataframeapi vs 무지성 코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL VS DataframeAPI VS 무지성 코딩</h2>\n<p>자 SPARK를 파이썬으로 작성할 경우 많은 선택지가 있으니… 바로 spark_sql 혹은 dataframe_api 둘 중 무었을 쓸지다.<a href=\"https://statisticsfox.notion.site/Spark-RDD-DataFrame-SQL-77b20bc7a90d4c709a002ad75542b396?pvs=4\">(이 둘 간의 비교는 이미 노션에 정리 함. 참고!)</a>\n<br></p>\n<p>무지성 코딩은 그럼 왜 넣었냐! 내가 처음에 무지성으로 코딩을 했었다. 바로 collect()함수로만 모든 집계를 처리한것이다.😱😱 그럼 절대 안된다.</p>\n<blockquote>\n<p>spark에는 Driver와 excutor가 있는데 다음과 같은 역할을 함. <br></p>\n<ul>\n<li>driver: 일감(TASK)이 들어오면 excuter에게 일감을 던져준다. <br></li>\n<li>excuter: 들어온 일을 처리하고 일한 결과를 driver에게 반환하는 역할을 한다.</li>\n</ul>\n</blockquote>\n<p>근데 collect()함수로만 모든 집계를 처리한다는 것은 driver가 모든 일을 다하도록 코딩한다는 뜻이다. 즉, 사장님이 알바 뽑았는데 알바 놔두고 자기 혼자 일 다하는 꼴이다.💀 이러면 병렬 연산의 장점도 없을 뿐더러 SPARK의 장점들이 아무짝에도 쓸모 없어져 버린다.<del>(근데 본인은 초반에 아런 멍청한 짓을 저지름ㅋㅅㅋ)</del> <br></p>\n<p>그래서 우리는 SQL엔진 혹은 Dataframe api를 활용해서 데이터를 집계 해야한다. 또한 이 둘을 사용하면 카탈리스트 옵티마이저라고 Spark 내에서 최적화 및 계획을 수립해 주기에 최선의 결과와 속도를 얻을 수 있다. 자세한 내용은 위 링크를 참고하자.</p>\n<h2 id=\"그렇게-선정된-sql\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EA%B2%8C-%EC%84%A0%EC%A0%95%EB%90%9C-sql\" aria-label=\"그렇게 선정된 sql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇게 선정된 SQL</h2>\n<p>나는  Spark SQL을 사용하기로 했다. 사실 나는 SQL 보다는 DataFrameAPI를 더 선호한다. 그 이유는 다음과 같다.</p>\n<ol>\n<li>DataFrame api는 오류가 났을 경우 컴파일 하기 용이하다.</li>\n<li>현재 변환하려고 하는 형식은 크게 복잡한 구조가 아니기에 엄청 간단하게 질의할 수 있다. <br></li>\n<li>SQL은 쿼리를 짜도 에러가 나면 그냥 쿼리에 문제가 있다고 알려주지 쿼리 어디서 문제가 있는지 알려주지 않는다.</li>\n</ol>\n<p>정도 되시겠다. 내가 Spark에서 쿼리를 기이이일게 짰을때 오류가 나면 “그냥 쿼리에 오류가 있다.”정도만 표시 되기에 쿼리가 길면 컴파일이 어려워진다. 다만 데이터 프레임은 어디서 오류가 났는지 컴파일이 비교적 명확하고 그렇기에 테스크 별로 모듈화하기가 엄청 좋다. <br>\n다만 이번에는 나는 1시간 단위로 집계를 해야 한다. SQL에는 window라는 기능이 있는데 이를 1hour로 설정해주면 내가 수동으로 비교해주지 않아도 자기내들 알아서 1시간 단위로 데이터를 집계해 준다.</p>\n<h2 id=\"코드를-살펴보자\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\" aria-label=\"코드를 살펴보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드를 살펴보자</h2>\n<h3 id=\"무지성-코딩\" style=\"position:relative;\"><a href=\"#%EB%AC%B4%EC%A7%80%EC%84%B1-%EC%BD%94%EB%94%A9\" aria-label=\"무지성 코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>무지성 코딩</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update_state</span><span class=\"token punctuation\">(</span>batch_df<span class=\"token punctuation\">,</span> batch_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> state<span class=\"token punctuation\">,</span> current_hour<span class=\"token punctuation\">,</span> batch_accumulator\n\n    now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>minute<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> microsecond<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> current_hour <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        current_hour <span class=\"token operator\">=</span> now\n\n    <span class=\"token comment\"># 새로운 시간 창에 들어서면 이전 데이터 집계 및 초기화</span>\n    <span class=\"token keyword\">if</span> now <span class=\"token operator\">!=</span> current_hour<span class=\"token punctuation\">:</span>\n    \n        <span class=\"token keyword\">if</span> batch_accumulator<span class=\"token punctuation\">:</span>\n            result_df <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>createDataFrame<span class=\"token punctuation\">(</span>batch_accumulator<span class=\"token punctuation\">,</span> schema<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"event_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            hourly_summary <span class=\"token operator\">=</span> result_df<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span>\n                F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_return\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span><span class=\"token string\">\"hour\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>lit<span class=\"token punctuation\">(</span>current_hour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            previous_hour <span class=\"token operator\">=</span> current_hour <span class=\"token operator\">-</span> timedelta<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n            year <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y'</span><span class=\"token punctuation\">)</span>\n            month <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%m'</span><span class=\"token punctuation\">)</span>\n            day <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%d'</span><span class=\"token punctuation\">)</span>\n            hour <span class=\"token operator\">=</span> previous_hour<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%H'</span><span class=\"token punctuation\">)</span>\n\n            bucket_name <span class=\"token operator\">=</span> <span class=\"token string\">'ddareungidatabucket'</span>\n            folder_name <span class=\"token operator\">=</span> <span class=\"token string\">'hourly_summary'</span>\n            path <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"s3a://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>folder_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>year<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>month<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>day<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>hour<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n            hourly_summary<span class=\"token punctuation\">.</span>repartition<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"overwrite\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parquet<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\n            hourly_summary<span class=\"token punctuation\">.</span>orderBy<span class=\"token punctuation\">(</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            batch_accumulator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        current_hour <span class=\"token operator\">=</span> now\n\n    batch_data <span class=\"token operator\">=</span> batch_df<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\n    changes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> batch_data<span class=\"token punctuation\">:</span>\n        station_id <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>stationId\n        current_count <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>parkingBikeTotCnt\n        event_time <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>event_time\n\n        <span class=\"token keyword\">if</span> station_id <span class=\"token keyword\">in</span> state<span class=\"token punctuation\">:</span>\n            previous_count <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>station_id<span class=\"token punctuation\">]</span>\n            change <span class=\"token operator\">=</span> current_count <span class=\"token operator\">-</span> previous_count\n            <span class=\"token keyword\">if</span> change <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                batch_accumulator<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> change<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">elif</span> change <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>change<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                batch_accumulator<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>change<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            changes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            batch_accumulator<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>station_id<span class=\"token punctuation\">,</span> event_time<span class=\"token punctuation\">,</span> current_count<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        state<span class=\"token punctuation\">[</span>station_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current_count\n\n\n    <span class=\"token keyword\">if</span> changes<span class=\"token punctuation\">:</span>\n        result_df <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>createDataFrame<span class=\"token punctuation\">(</span>changes<span class=\"token punctuation\">,</span> schema<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"event_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        result_df<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위에는 내가 무지성으로 코딩한 코드다 무지성으로 했다는 뜻은 그냥 기능에 충실하게 <font color=\"#c00000\">확장성 고려하지 않고 내가 아는 파이썬 코드대로 짰다는 뜻</font>이다.(<del>대충 의식의 흐름대로 짰다는 것</del>) 지금 보면 1시간마다 데이터를 쌓아뒀다가 집계를 해야하기 때문에 상태 데이터를 전역변수로 설정해두고 시간창 즉 시간이 변경되지 않으면 계속해서 데이터를 업데이트 시간이 변경되면 한시간이 지났다는 의미이므로 데이터 집계 및 전송 및 상태창 초기화 를 하고 있다.</p>\n<p>근데 자 여기서 보자 지금 보면 데이터를 변환하기 위해 데이터를 읽어 들이는 부분이 아래 코드처럼 묶여있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">batch_data <span class=\"token operator\">=</span> batch_df<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>아까 말했듯이 이는 데이터를 드라이버 노드로 수집하는 것으로 기껏 구축한 Spark의 최장점인 병렬처리의 이점을 쓰레기통에 박아넣은 행위다.</p>\n<p>그래서 코드를 for문과 if문으로만 짜둔 이름하여 더러운 코드가 완성이 되었다.</p>\n<h3 id=\"spark_sql\" style=\"position:relative;\"><a href=\"#spark_sql\" aria-label=\"spark_sql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spark_SQL</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update_state</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> batch_df<span class=\"token punctuation\">,</span> batch_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>minute<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> microsecond<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        joined_df <span class=\"token operator\">=</span> batch_df<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>state_df<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">\"left\"</span><span class=\"token punctuation\">)</span>\n\n        changes_df <span class=\"token operator\">=</span> joined_df<span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>coalesce<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>lit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>withColumn<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">,</span> \n            F<span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>otherwise<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        new_state_df <span class=\"token operator\">=</span> changes_df<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>\n            F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            F<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">(</span><span class=\"token string\">\"parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"previous_parkingBikeTotCnt\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>state_df <span class=\"token operator\">=</span> new_state_df\n\n        hourly_summary <span class=\"token operator\">=</span> changes_df<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>\n            F<span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">(</span><span class=\"token string\">\"event_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1 hour\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stationId\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span>\n            F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_rental\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            F<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_return\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"window.start\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"window.end\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"stationId\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"total_rental\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"total_return\"</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> hourly_summary</code></pre></div>\n<p>너무나도 깔끔(?)해진 코드를 볼 수 있다. 먼저 바뀐점을 알아보자. 처음에 배치 데이터와 기존 상태 데이터를 leftjoin 하는데 우선 초기에 조인 시 오류를 방지하기 위해 <code class=\"language-text\">previous_parkingBikeTotCnt</code>가 0인 경우 <code class=\"language-text\">change</code>, <code class=\"language-text\">return</code>, <code class=\"language-text\">rental</code> 값을 0으로 설정해준다.  <br><br> 그리고 <code class=\"language-text\">parkingBikeTotCnt</code> - <code class=\"language-text\">previous_parkingBikeTotCnt</code> = <code class=\"language-text\">change</code>로 둔 뒤에 change 값이 양수이면 return에 change 값이 음수이면 rental에 저장 하고 그 이외는 0으로 저장한다.\n<br><br> 그렇게 데이터가 들어올때 마다 이런 연산이 반복되고 1시간이라는 window 즉 시간창이 지나게 되면 <code class=\"language-text\">groupBy</code>연산이 실행되면서 아래와 같은 한시간 집계 분에 해당하는 데이터 프레임이 완성된다.</p>\n<table>\n<thead>\n<tr>\n<th>window.start</th>\n<th>window.end</th>\n<th>stationId</th>\n<th>total_rental</th>\n<th>total_return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station1</td>\n<td>20</td>\n<td>23</td>\n</tr>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station2</td>\n<td>3</td>\n<td>6</td>\n</tr>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station3</td>\n<td>12</td>\n<td>9</td>\n</tr>\n<tr>\n<td>2023-08-03 06:00:00</td>\n<td>2023-08-03 07:00:00</td>\n<td>station4</td>\n<td>8</td>\n<td>7</td>\n</tr>\n</tbody>\n</table>\n<p>그리고 이제 해당 적제 결과를 S3 양동이에 차곡차곡 담아주면 된다.\n세부적인 코드는 아래에서 확인하자.ㅎㅎ\n<a href=\"https://github.com/StatisticsFox/Ddareungi-Spark\">https://github.com/StatisticsFox/Ddareungi-Spark</a></p>\n<h2 id=\"마무리하며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0\" aria-label=\"마무리하며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리하며</h2>\n<p>사실 Spark의 개념에 대해서는 알고 있었다. 근데 이게 코드를 짤때 어떤 영향을 미치는지는 몰랐다. Spark는 어떤거로 구성되어 있는지 특성은 뭔지 등을 알고 있었는데 이렇게 코드를 직접 짜는 과정에서 알고 있는 내용을 코드에 녹여내는건 확실히 프로젝트를 해보면서 몸으로 익혀야 하는 것 같다. 일단 현재는 30초마다 카프카에서 불러오고 있는데 점차 10초 5초로 줄이는 과정에서 메모리가 얼마나 부족해지는지 그럴 경우 얼마나 무엇을 더 최적화해야 하는지 등을 프로젝트를 마무리해 가면서 확인해볼 예정이다. 그때 다시 글로 돌아오겠따!!</p>","frontmatter":{"date":"August 03, 2024","title":"ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기","categories":"Data_Engineering","author":"최지혁","emoji":"😮"},"fields":{"slug":"/Data Engineering/ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기/"}},"prev":{"id":"d65508b6-6427-511e-9cb6-6ddb7e63e3ab","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p>최근에 BOAZ 동아리에서 Oauto2와 goole calender를 이용해서 웹 서비스를 만드는 프로젝트를 진행하는데(<del>계획에 전혀없던 리액트까지 써보는중🥲</del>) 전반적인 인프라 구성을 내가 맡았다. 이때, 도메인을 AWS EC2에 등록하는 과정에서 로드밸런서를 사용하게 되었다. ALB 로드 밸런서에 SSL 인증을 적용하면 각 Ec2 인스턴스 마다 SSL을 처리하지 않아도 HTTPS 트래픽을 처리할 수 있기에 반드시 필요한 부분이었다. 그 과정에서 로드 밸런서를 단순히 “그냥 부하분산 아님?”으로 알고 있던 나에게 개념정리가 꼭 필요한 부분이라 이번 글을 작성하게 되었다. 그럼 시작해보자\n<img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&#x26;authkey=%21AInaQqp_g1hhKd0&#x26;width=564&#x26;height=311\" alt=\"시작해보자\"></p>\n<h2 id=\"core\" style=\"position:relative;\"><a href=\"#core\" aria-label=\"core permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Core</h2>\n<p>기본적으로 로드밸런서는 Scale out에서 사용된다. 서비스는 성장하는데 늘어나는 트래픽을 서버가 감당할 수 없을때 서버를 증설하는데 이 과정에서 각 서버에 걸리는 부하를 고르게 나누기 위해서는 로드밸런싱이 필수적으로 동반되어야 한다.</p>\n<blockquote>\n<p>즉 다양한 곳에서 들어오는<font color=\"#c00000\"> 트래픽을 여러 서버에 분산</font>시켜 하나의 서버에 부담이 가지 않도록 하는 것이 로드밸런싱의 주요 목적이며, 이를 통해 <font color=\"#c00000\">서버의 성능과 안정성을 높일 수 있다.</font></p>\n</blockquote>\n<h2 id=\"로드밸런싱의-이점\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1%EC%9D%98-%EC%9D%B4%EC%A0%90\" aria-label=\"로드밸런싱의 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로드밸런싱의 이점</h2>\n<h3 id=\"가용성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9A%A9%EC%84%B1\" aria-label=\"가용성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가용성</h3>\n<p>서버에 장애가 발생하거나 업데이트를 해야 하는 상황에 서버가 가동 중지된다면 애플리케이션은 사용할 수 없다. 로드밸런서는 이러한 문제를 자동으로 감지하고 사용가능한 서버로 리다이렉션하는 관리자 같은 역할을 한다.</p>\n<h3 id=\"확장성\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\" aria-label=\"확장성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장성</h3>\n<p>한 서버에 트래픽이 몰리는 병목현상을 방지하고 트래픽을 예측하여 다른 서버를 추가하거나 제거한다.</p>\n<h3 id=\"보안\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88\" aria-label=\"보안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안</h3>\n<p>크롤링이나 악성 프로그램 등 공격자가 서버 장애를 일으키는 수백만 개의 동시 요청으로 애플리케이션 서버를 가득 채우는 공격을 방지하거나 최소화한다.</p>\n<h3 id=\"성능\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5\" aria-label=\"성능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능</h3>\n<p>응답 시간을 늘리고 네트워크 지연 시간을 줄여 애플리케이션 성능을 향상합니다.</p>\n<h2 id=\"로드밸런싱-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"로드밸런싱 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로드밸런싱 알고리즘</h2>\n<p>로드벨런싱에도 여러 알고즘이 존재하는데 가장 흔한 것이 라운드 로빈, 가중치 분배, 최소연결 방식이 있다. 다만 서로 다른 적합한 케이스가 존재하기 때문에 사용환경에 따라 적절한 로드 밸런서를 선택해야 한다.</p>\n<p>먼저 정적 로드 밸런싱에 대해서 알아보자</p>\n<h3 id=\"라운드-로빈-방식round-robin-method\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EB%B0%A9%EC%8B%9Dround-robin-method\" aria-label=\"라운드 로빈 방식round robin method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라운드 로빈 방식(Round Robin Method)</h3>\n<p>포커 칠때 딜러가 카드 돌리는 것을 생각하면 된다. 딜러가 카드를 왼쪽 사람부터 차례차례 카드를 건내주고 마지막 사람까지 다 주면 다시 처음 줬단 사람으로 되돌아가 주는 것을 반복하는데 해당 방식도 서버 A, B, C 가 있다면 A → B → C → A 순서대로 분배한다. 보통 모든 서버가 같은 양일때 이렇게 한다.</p>\n<h3 id=\"가중치-기반-라운드-로빈-방식weighted-round-robin-method\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%A4%91%EC%B9%98-%EA%B8%B0%EB%B0%98-%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EB%B0%A9%EC%8B%9Dweighted-round-robin-method\" aria-label=\"가중치 기반 라운드 로빈 방식weighted round robin method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가중치 기반 라운드 로빈 방식(Weighted Round Robin Method)</h3>\n<p>여러 서버가 같은 사양이 아니고, 특정 서버의 스펙이 더 좋은 경우 이 방식을 사용한다. 5살짜리와 20살짜리가 밥을 먹는데 당연히 20살 짜리에게 밥을 더 많이 주는 것처럼 그릇 큰놈한테 트래픽 처리량 몰아주는 방식이다.</p>\n<h3 id=\"ip-해시-방식ip-hash-method\" style=\"position:relative;\"><a href=\"#ip-%ED%95%B4%EC%8B%9C-%EB%B0%A9%EC%8B%9Dip-hash-method\" aria-label=\"ip 해시 방식ip hash method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IP 해시 방식(IP Hash Method)</h3>\n<p>여기서는 수학적 계산인 해싱이라는 기법이 들어가는데 사용자 ip를 기준으로 해싱하여 사용자가 항상 동일한 서버로 연결되는 것을 보장한다. 우리 집 와이파이로 어떤 서비스에 접속하면 우리집 와이파이는 그 서비스의 항상 같은 서버로 연결된다.</p>\n<p>다음은 동적 로드 밸런싱에 대해 알아보자</p>\n<h3 id=\"최소-연결-방법least-connection-method\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C-%EC%97%B0%EA%B2%B0-%EB%B0%A9%EB%B2%95least-connection-method\" aria-label=\"최소 연결 방법least connection method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최소 연결 방법(Least Connection Method)</h3>\n<p>모든 서버가 같은 스펙을 지닌것을 가정하고 적용하는 방식으로 한마디로 ‘저울’과 같다. 연결이 적은 서버를 확인하고 그 서버로 트래픽을 분할한다. 저울이 평행할 수 있도록!</p>\n<h3 id=\"최소-응답-시간-방법least-response-time-method\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C-%EC%9D%91%EB%8B%B5-%EC%8B%9C%EA%B0%84-%EB%B0%A9%EB%B2%95least-response-time-method\" aria-label=\"최소 응답 시간 방법least response time method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최소 응답 시간 방법(Least Response Time Method)</h3>\n<p>이 방식은 개발자가 아닌 사용자가 얼마나 더 만족할까를 고민한 흔적이 보이는 로드밸런싱이다. 즉, 서버의 현재 연결상태 그리고 응답시간을 고려해서 가장 짧은 응답시간을 보내는 서버로 트래픽을 할당한다. 즉 한 서버에 여유가 없더라도 조건에 부합한다면 그 서버에 트래픽을 할당한다.</p>\n<h2 id=\"aws-로드-밸런서-유형\" style=\"position:relative;\"><a href=\"#aws-%EB%A1%9C%EB%93%9C-%EB%B0%B8%EB%9F%B0%EC%84%9C-%EC%9C%A0%ED%98%95\" aria-label=\"aws 로드 밸런서 유형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS 로드 밸런서 유형</h2>\n<p>솔직히 한번에 이해하는건 어렵기 때문에 경찰에 비유해서 설명해 보고자 한다.</p>\n<h3 id=\"albapplication-load-balancer\" style=\"position:relative;\"><a href=\"#albapplication-load-balancer\" aria-label=\"albapplication load balancer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ALB(Application Load Balancer)</h3>\n<p>먼저 ALB는 HTTP/HTTPS 기반으로 요청을 관리하는 즉, 경찰서 들어가면 앞에 앉은 말단 경찰이다. 그들은 시민과 직접 대화하기에 세심하게 신고인의 요구를 파악하고 관련 부서로 연결을 해준다.</p>\n<ul>\n<li>예를 들어 “사기를 당했어요..” 라고 하면 사이버 범죄일까요? 아니면 금융, 피싱? 이렇게 물어본 후 각 상황에 맞는 부서에 연결 시켜 준다.</li>\n<li>즉, ALB는 HTTP 요청을 매우 세세하게 분석해서 그 요청에 맞는 서버로 트래픽을 보낸다. 사용자마다 다른 페이지나 기능으로 연결할때 매우 유용하다.</li>\n</ul>\n<h3 id=\"nlbnetwork-load-balancer\" style=\"position:relative;\"><a href=\"#nlbnetwork-load-balancer\" aria-label=\"nlbnetwork load balancer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NLB(Network Load Balancer)</h3>\n<p>NLB는 TCP/UDP 기반으로 트래픽을 처리하는 로드 밸런서로 교차로에서 차들이 오갈 때 신호를 보고 빠르게 교통 흐름을 관리하는 교통경찰과 비슷하다.</p>\n<ul>\n<li>교통경찰들은 이 차가 무슨 차인지 어떤 목적을 가지고 가는 차인지 관심 없고 그냥 신호가 맞으면 빠르게 통과시킨다.</li>\n<li>이처럼 세부적인 정보보다는 IP 주소나 TCP 연결을 기반으로 트래픽을 빠르게 처리하고, 고속 통신이 필요한 비스에 적합하다.</li>\n</ul>\n<h3 id=\"elbelastic-load-balancer\" style=\"position:relative;\"><a href=\"#elbelastic-load-balancer\" aria-label=\"elbelastic load balancer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ELB(Elastic Load Balancer)</h3>\n<p>ELB는 기본적인 트래픽 관리 기능만 제공하는 비교적 간단한 녀석이다. 예를들면 단순히 경찰청 사이트라고 생각하면 되겠다.</p>\n<ul>\n<li>인터넷 사기 당했는데 어디로 갈까요 라고 물어보면 단순히 사기 담당 부서 위치만 알려주고 끝내는 느낌이다.</li>\n<li>즉, 요즘은 ALB나 NLB처럼 더 세부적이거나 빠른 트래픽 처리를 위한 로드 밸런서가 더 많이 사용한다.</li>\n</ul>\n<h2 id=\"따라서\" style=\"position:relative;\"><a href=\"#%EB%94%B0%EB%9D%BC%EC%84%9C\" aria-label=\"따라서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>따라서..</h2>\n<blockquote>\n<ul>\n<li>ALB: 웹 애플리케이션에서 사용자마다 맞춤형 응답이 필요한 경우.</li>\n<li>NLB: 빠른 네트워크 트래픽 처리, 실시간 데이터 전송이 필요한 경우.</li>\n<li>ELB: 간단한 트래픽 관리가 필요한 경우, 예전부터 사용된 안정적인 방식.</li>\n</ul>\n</blockquote>\n<p>이렇게 로드 밸런서의 개념과 AWS에 있는 3가지 로드 밸런서에 대해 알아보았다. 세월이 지나면 분명 까먹을 것이 뻔하기 때문에 최대한 쉽게 이해하려고 노력해봤다 ㅎ. 로드 밸런서 하면 뭐다? 경찰이다~~ 하면 이 내용들이 머리속에서 잘 생각나지 않을까 한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">들어가기에 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#core\">Core</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1%EC%9D%98-%EC%9D%B4%EC%A0%90\">로드밸런싱의 이점</a></p>\n<ul>\n<li><a href=\"#%EA%B0%80%EC%9A%A9%EC%84%B1\">가용성</a></li>\n<li><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\">확장성</a></li>\n<li><a href=\"#%EB%B3%B4%EC%95%88\">보안</a></li>\n<li><a href=\"#%EC%84%B1%EB%8A%A5\">성능</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">로드밸런싱 알고리즘</a></p>\n<ul>\n<li><a href=\"#%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EB%B0%A9%EC%8B%9Dround-robin-method\">라운드 로빈 방식(Round Robin Method)</a></li>\n<li><a href=\"#%EA%B0%80%EC%A4%91%EC%B9%98-%EA%B8%B0%EB%B0%98-%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EB%B0%A9%EC%8B%9Dweighted-round-robin-method\">가중치 기반 라운드 로빈 방식(Weighted Round Robin Method)</a></li>\n<li><a href=\"#ip-%ED%95%B4%EC%8B%9C-%EB%B0%A9%EC%8B%9Dip-hash-method\">IP 해시 방식(IP Hash Method)</a></li>\n<li><a href=\"#%EC%B5%9C%EC%86%8C-%EC%97%B0%EA%B2%B0-%EB%B0%A9%EB%B2%95least-connection-method\">최소 연결 방법(Least Connection Method)</a></li>\n<li><a href=\"#%EC%B5%9C%EC%86%8C-%EC%9D%91%EB%8B%B5-%EC%8B%9C%EA%B0%84-%EB%B0%A9%EB%B2%95least-response-time-method\">최소 응답 시간 방법(Least Response Time Method)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#aws-%EB%A1%9C%EB%93%9C-%EB%B0%B8%EB%9F%B0%EC%84%9C-%EC%9C%A0%ED%98%95\">AWS 로드 밸런서 유형</a></p>\n<ul>\n<li><a href=\"#albapplication-load-balancer\">ALB(Application Load Balancer)</a></li>\n<li><a href=\"#nlbnetwork-load-balancer\">NLB(Network Load Balancer)</a></li>\n<li><a href=\"#elbelastic-load-balancer\">ELB(Elastic Load Balancer)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%94%B0%EB%9D%BC%EC%84%9C\">따라서..</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 08, 2024","title":"Load Balancer란? Feat. AWS","categories":"Data_Engineering Cloud","author":"최지혁","emoji":"🛠️"},"fields":{"slug":"/Cloud/Loadbalancer/"}},"site":{"siteMetadata":{"siteUrl":"https://statisticsfox.github.io","comments":{"utterances":{"repo":"StatisticsFox/blog-comments"}}}}},"pageContext":{"slug":"/Data Engineering/nginx로 Spark, Yarn, kafkaui 구성하기/","nextSlug":"/Data Engineering/ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기/","prevSlug":"/Cloud/Loadbalancer/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}