{"componentChunkName":"component---src-templates-blog-template-js","path":"/Data Engineering/nginx로 Spark, Yarn, kafkaui 구성하기/","result":{"data":{"cur":{"id":"a14666bd-b475-5985-9bcc-462ee1457782","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p>kafka 토픽관리나 메모리 관리 그리고 SPARK 메모리나 yarn 그리고 프로케테우스와 그라파나 등이 잘 작동하는지 모두 cli로 관리하는것은 명백한 한계가 존재한다. 너무 불편하고 그게 다 시간 자원 빼먹는거다. 때문에 Web ui로 관리하는 것이 보통 굉장히 편한데 사용하는 리소스와 툴이 늘어나는 만큼 많은 Web ui를 띄워야 한다.</p>\n<p>그동안 나는 포트 포워딩으로 모든 ui를 띄웠다. 이렇게 됐을 경우 단점은 <font color=\"#c00000\">인스턴스를 끄고 킬때마다 매번 포트포워딩을 수동으로 해주어야 한다는 것이다.</font>그동안은 한번에 포트 포워딩을 해주는 .sh파일을 길게 만들어서 해결해왔으나 점점 감당하기 어려운 수준까지 갔다. 때문에 도입한 것이 바로 우리 팀원 로컬 내부의 hosts에 ip주소와 도메인 이름을 지정해두고 nginx로 ui를 띄울 수 있도록 설정해두는 방향이었다.</p>\n<div align=\"center\">\n    <img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&amp;authkey=%21AInaQqp_g1hhKd0&amp;width=564&amp;height=311\" alt=\"시작해보자\">\n</div>\n<h2 id=\"nginx-설정\" style=\"position:relative;\"><a href=\"#nginx-%EC%84%A4%EC%A0%95\" aria-label=\"nginx 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nginx 설정</h2>\n<h3 id=\"public-nat에-nginx-설치하여-http-rewrite할-수-있도록-설정\" style=\"position:relative;\"><a href=\"#public-nat%EC%97%90-nginx-%EC%84%A4%EC%B9%98%ED%95%98%EC%97%AC-http-rewrite%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%EC%84%A4%EC%A0%95\" aria-label=\"public nat에 nginx 설치하여 http rewrite할 수 있도록 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>public-nat에 nginx 설치하여 http rewrite할 수 있도록 설정</h3>\n<p>먼저 nginx를 public-nat에 설치해 주고 nginx.conf를 관리자 권한으로 수정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ec2-user$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> nginx\nec2-user$ <span class=\"token builtin class-name\">cd</span> /etc/nginx\nec2-user$ <span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> nginx.conf</code></pre></div>\n<p>그 후 include 바로 아래 server 블록 기존 내용 삭제 후 아래 resolver와 server 블록 삽입하면 된다. 간편함을 위해 우선 kafka web ui만 들고왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># include /etc/nginx/conf.d/*.conf; &lt;- 요 아래에 작성</span>\n\n    resolver <span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">;</span>\n \t\tserver <span class=\"token punctuation\">{</span>\n        listen <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n        server_name kafka03<span class=\"token punctuation\">;</span>\n        location / <span class=\"token punctuation\">{</span>\n            proxy_pass http://<span class=\"token operator\">&lt;</span>private IP address<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>port<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 실제 백엔드 주소로 변경</span>\n            proxy_set_header Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Forwarded-For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n            proxy_set_header X-Forwarded-Proto <span class=\"token variable\">$scheme</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 양식으로 모든 포트를 다 지정해 주면 된다. 지금 위 양식으로 conf에 지정하면 server_name에 지정한 이름이 바로 도메인 이름이다. 나중에 로컬에도 적용해줄 예정이니 잘 기억해주자.</p>\n<h2 id=\"nginx-서비스-시작\" style=\"position:relative;\"><a href=\"#nginx-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EC%9E%91\" aria-label=\"nginx 서비스 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nginx 서비스 시작</h2>\n<h3 id=\"nginxconf-작성-완료되면-nginx-서비스-시작\" style=\"position:relative;\"><a href=\"#nginxconf-%EC%9E%91%EC%84%B1-%EC%99%84%EB%A3%8C%EB%90%98%EB%A9%B4-nginx-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EC%9E%91\" aria-label=\"nginxconf 작성 완료되면 nginx 서비스 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nginx.conf 작성 완료되면 nginx 서비스 시작</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ec2-user$ <span class=\"token function\">sudo</span> systemctl start nginx\nec2-user$ <span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> nginx</code></pre></div>\n<h3 id=\"로컬의-etchosts-를-이용하여-resolve-하도록-추가-패키지-설치\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC%EC%9D%98-etchosts-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-resolve-%ED%95%98%EB%8F%84%EB%A1%9D-%EC%B6%94%EA%B0%80-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"로컬의 etchosts 를 이용하여 resolve 하도록 추가 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬의 /etc/hosts 를 이용하여 resolve 하도록 추가 패키지 설치</h3>\n<p>다음은 필요한 패키지를 하나 더 설치해 줄거다. <code class=\"language-text\">dnsmasq</code>라는 건데 경량 DNS 포워더 및 DHCP 서버다. 이걸로 로컬 호스트 파일(/etc/hosts)을 사용하여 도메인 이름을 IP 주소로 변환할 수 있다. 우리는 로컬에서 접속할 것이기 때문에 ip주솔르 변환해주는 핵심 패키지이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ec2-user$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> dnsmasq\nec2-user$ <span class=\"token function\">sudo</span> systemctl start dnsmasq\nec2-user$ <span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> dnsmasq</code></pre></div>\n<h3 id=\"서버-방화벽해제-및-영구저장\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EB%B0%A9%ED%99%94%EB%B2%BD%ED%95%B4%EC%A0%9C-%EB%B0%8F-%EC%98%81%EA%B5%AC%EC%A0%80%EC%9E%A5\" aria-label=\"서버 방화벽해제 및 영구저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 방화벽해제 및 영구저장</h3>\n<p>방화벽을 해제해주고</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ec2-user$ <span class=\"token function\">sudo</span> iptables –F\nec2-user$ <span class=\"token function\">sudo</span> <span class=\"token function\">service</span> iptables save</code></pre></div>\n<h2 id=\"로컬의-hosts-파일-수정\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC%EC%9D%98-hosts-%ED%8C%8C%EC%9D%BC-%EC%88%98%EC%A0%95\" aria-label=\"로컬의 hosts 파일 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬의 hosts 파일 수정</h2>\n<h3 id=\"로컬-환경의-hosts-파일에-호스트-등록\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC-%ED%99%98%EA%B2%BD%EC%9D%98-hosts-%ED%8C%8C%EC%9D%BC%EC%97%90-%ED%98%B8%EC%8A%A4%ED%8A%B8-%EB%93%B1%EB%A1%9D\" aria-label=\"로컬 환경의 hosts 파일에 호스트 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬 환경의 hosts 파일에 호스트 등록</h3>\n<p>/etc/hosts 파일에 아래 public-nat에 할당된 Elastic IP 확인 후 바로 입력해주도록 한다.\n본인 로컬의 /etc/hosts 밑에 아래처럼 적용해준다. 이름은 아까 nginx.conf에서 설정했던 server_name임을 잊지말자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>Elastic IP<span class=\"token punctuation\">}</span> kafka01 <span class=\"token comment\"># Elastic IP &lt;- public NAT IP</span>\n<span class=\"token punctuation\">{</span>Elastic IP<span class=\"token punctuation\">}</span> kafka02\n<span class=\"token punctuation\">{</span>Elastic IP<span class=\"token punctuation\">}</span> kafka03</code></pre></div>\n<h2 id=\"확인\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9D%B8\" aria-label=\"확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확인</h2>\n<p>그러면! 짠! 굳이 public nat의 ip 주소와 포트포워딩을 이용하지 않아도 이제는 언제든지 서버를 키면 설정해둔 도메인 이름으로 원하는 webui에 접속이 가능하다.</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQNF77uX7iyER6tUXEZYC-EMAV7SE2amV7b9rzz7SGpVVKM?width=1024\" alt=\"kafka_web_ui\">\n</div>","excerpt":"들어가기에 앞서 kafka 토픽관리나 메모리 관리 그리고 SPARK 메모리나 yarn 그리고 프로케테우스와 그라파나 등이 잘 작동하는지 모두 cli로 관리하는것은 명백한 한계가 존재한다. 너무 불편하고 그게 다 시간 자원 빼먹는거다. 때문에 Web ui로 관리하는 것이 보통 굉장히 편한데 사용하는 리소스와 툴이 늘어나는 만큼 많은 Web ui를 띄워야 한다. 그동안 나는 포트 포워딩으로 모든 ui를 띄웠다. 이렇게 됐을 경우 단점은 인스턴스를 끄고 킬때마다 매번 포트포워딩을 수동으로 해주어야 한다는 것이다.그동안은 한번에 포트 포워딩을 해주는 .sh파일을 길게 만들어서 해결해왔으나 점점 감당하기 어려운 수준까지 갔다. 때문에 도입한 것이 바로 우리 팀원 로컬 내부의 hosts에 ip주소와 도메인 이름을 지정해두고 nginx로 ui를 띄울 수 있도록 설정해두는 방향이었다. nginx 설정 public-nat에 nginx 설치하여 http rewrite할 수 있도록 설정 먼저 ngin…","frontmatter":{"date":"August 18, 2024","title":"nginx로 Spark, Yarn, kafka 등 리소스 관리 Web ui 구성하기","categories":"Data_Engineering","author":"최지혁","emoji":"🏓"},"fields":{"slug":"/Data Engineering/nginx로 Spark, Yarn, kafkaui 구성하기/"}},"next":{"id":"292776ae-979d-5701-bede-3ea0a87ceb19","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p>이번에 RAG를 이용한 채용정보 챗봇 구축을 위해 Azure 쿠버네티스 환경(통칭 AKS)에서 ETL 프로젝트를 해보기 위해 아래와 같은 계획을 짰다.</p>\n<ol>\n<li>프로젝트 환경에 airflow를 띄우고 주기적인 크롤링</li>\n<li>SPARK를 통한 데이터 마트 구축</li>\n<li>GPT-3 토크나이저를 이용한 데이터 임베딩</li>\n<li>크로마 DB에 데이터 적제</li>\n</ol>\n<p>이거 할 생각에 잔뜩 기대하고 허겁지겁 일단 AKS 위에 쿠버네티스를 올린 후 pod에 airflow를 올리고 DAG를 GIT으로 관리할 수 있게끔 구성했다. ACR(Azure Container Registry)도 만들어 도커로 환경 배포까지 자동화를 해놨으나 <font color=\"#c00000\">결국 무산 되었다…</font><br><br>\n그 이유는 바로 비용문제이다. 일단 내가 개발한 크롤러로 데이터를 수집하면 데이터의 형태가 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Datetime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2024-08-10\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[강동/통근] 삼성E&amp;A 비서/사무보조 사원 채용\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"URL\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.saramin.co.kr/zf_user/jobs/relay/view?view_type=search&amp;rec_idx=48782490&amp;location=ts&amp;searchType=search&amp;paid_fl=n&amp;search_uuid=004d110a-a231-41c0-92da-9655708bbb41\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(주)에스이에스, [강동/통근] 삼성E&amp;A 비서/사무보조 사원 채용, 경력:경력무관, 학력:학력무관, 연봉:2,960 만원, 마감일:2024-08-19, 홈페이지:www.seshr.co.kr\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"end_date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2024-08-19,\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start_date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2024.08.09 14:00\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Work_history\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"무관(신입포함)\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Education\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"학력무관\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Job_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"계약직, 파견직\\n상세보기\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Salary\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"연봉 2,960 만원 (주 40시간)\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"근무형태\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"상세보기\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"working time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"주 5일(월~금) 08:00~17:00\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"working area\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"서울 강동구 지도\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Co_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(주)에스이에스\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"img_list\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"detail_data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[강동/통근] 삼성E&amp;A\\n비서/사무보조 사원 모집\\n모집부문 및 상세내용\\n공통 자격요건\\nㆍ학력 : 무관\\n비서행정 1명\\n     담당업무\\n    ㆍ비서 업무\\n    ㆍ팀 서무 업무(팀 공통 업무 지원)\\n    ㆍ예산 및 월별 결산 지원(경비처리, 계산서 등)\\n    ㆍ출장 지원(비자신청 및 예약 등)\\n\\n 자격사항\\nㆍ동종업계 경력자 우대\\nㆍMS-Office(워드/엑셀/파워포인트) 능통자 우대\\nㆍ경리업무 경험자(SAP 또는 ERP시스템 유경험자 우대)\\nㆍ근거리 거주자 우대\\n\\n  ■ 삼성그룹사 경력 쌓을 수 있습니다.\\n  ■ 면접합격 이후 빠른 출근 가능\\n  ■ 서울,경기,인천권 통근버스 운행\\n  ■ 경력 증명서 발급 가능\\n\\n근무조건\\n\\n\\n근무형태 : 파견계약직 (12개월/연장 시 최대 2년까지 근무가능) \\n근무일시 : 주 5일(월~금) 08:00 ~ 17:00 (점심시간 11:30 ~ 13:30 中 1시간)\\n근무지역 : 서울 강동구 상일로 6길 26 글로벌엔지니어링센터(상일동역 인근)\\n급여수준 : 2,224,000원(세전) + 명절상여금 별도 (설날/추석 각 148만 연 2회) + 연차수당 별도(잔여 발생 시)  = 연봉기준 약 2,960만\\n\\n복리후생 : 명절상여금(연 2회/근속기간 무관) / 4대보험 / 연차수당 / 경조휴가 / 명절선물 등\\n \\n\\n전형절차\\n서류전형\\n1차면접\\n최종합격\\n접수기간 및 방법\\nㆍ 접수기간 : ~ 2024년 08월 19일 (월) 09시\\nㆍ 접수방법 : 사람인 입사지원 또는  sh0722@seshr.co.kr 메일 접수\\nㆍ 이력서양식 : 자사양식 (첨부파일 참조) \\n유의사항\\nㆍ입사지원 서류에 허위사실이 발견될 경우, 채용확정 이후라도 채용이 취소될 수 있습니다.\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 문제가 바로 ‘detail_data’다. 이 데이터를 <code class=\"language-text\">임베딩하는데 드는 비용</code>, <code class=\"language-text\">학습시키는데 드는 비용</code>, 그리고 프롬프트만해도 <code class=\"language-text\">API 비용</code>이 엄청나다. 근데 해당 기능은 필수적인 기능이라 데이터 엔지니어링 파트에서 비용 절감을 하는 수밖에 없었고 쿠버네티스를 사용하지 않기로 했다.ㅜㅜㅜ(<del>데엔의 희생..</del>)  <br><br>\n이거 어떻게 할까 알아보는데 <font color=\"#c00000\">EKS는 노드 풀 단계에서 부터 서버리스가 가능</font>한 반면 <font color=\"#0096FF\">AKS</font>는 노드 풀 비용은 필수 그리고 그 후 <font color=\"#0096FF\">스케일 아웃에서만 서버리스가 제공</font>된다는 사실을 알았다. <del>Azure 싫어하는거 아닌데 뭔가 맛이 없다.</del>\n다만 우리는 한이음 멘토님이 마소 현역이라 AWS 금지령이 내려져서 울며 겨자먹기로 Azure를 써야 하는 상황이다.</p>\n<p>결국 그냥 AzureFunction을 사용해서 주기적으로 크롤링을 하고 VM 하나 띄워서 그 안에 Chroma DB를 띄우기로 했다.</p>\n<p>그래서 이미 진행한 AKS 구축해 둔게 아무쓸모가 없어졌다! 때문에 이대로 폭파시키기는 너무 아쉬워 그 과정을 기록해 두고자 한다.\n<br>\n그럼 시작해보자.</p>\n<div align=\"center\">\n    <img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&amp;authkey=%21AInaQqp_g1hhKd0&amp;width=564&amp;height=311\" alt=\"시작해보자\">\n</div>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<p>해당 패키지들이 설치되어 있는지 우선 확인하자</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/cli/azure/install-azure-cli\">az cli</a>가 설치되어 있는지</li>\n<li>.kubectl를 설치했는지 <a href=\"https://learn.microsoft.com/en-us/azure/aks/learn/quick-kubernetes-deploy-cli#connect-to-the-cluster\">az aks install-cli.</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli\">Terraform CLI</a>가 설치되어 있는지.</li>\n</ul>\n<h2 id=\"terraform을-이용한-aks-구성\" style=\"position:relative;\"><a href=\"#terraform%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-aks-%EA%B5%AC%EC%84%B1\" aria-label=\"terraform을 이용한 aks 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform을 이용한 AKS 구성</h2>\n<p>본인이 클라우드 환경에서 Portal 만지는게 어렵다?? 그럼 그냥 고개를 들어 Terraform을 보면 된다. <font color=\"#c00000\">Terraform은 인프라를 코드로 관리할 수 있게 해주는 굉장히 편리한 도구</font>로 apply 딸깍 한번에 수많은 설정들이 적용되어 인프라 구축이 가능하다. 물론 러닝커브가 있으나 튜토리얼이 사례 별로 “아니 이 정도까지 친절하다고?”수준으로 잘 나와 있기에 그대로 따라하면된다. GPT가 필요 없을 정도로 친절하다.\n<br>\n<a href=\"https://registry.terraform.io\">Terraform 튜토리얼</a><br>\n<a href=\"https://developer.hashicorp.com/terraform/docs\">Terraform 공식 docs</a></p>\n<p>그럼 코드를 보도록 하자</p>\n<h3 id=\"providerstf\" style=\"position:relative;\"><a href=\"#providerstf\" aria-label=\"providerstf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>providers.tf</h3>\n<p>providers는 가장 기초적인 파일로 기본적인 패키지나 설정 그리고 내가 어떤 플랫폼의 인프라를 사용할 것인지 사전 정의를 해두는 파일이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">provider <span class=\"token string\">\"azurerm\"</span> <span class=\"token punctuation\">{</span>\n  skip_provider_registration = <span class=\"token string\">\"true\"</span>\n  features <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nterraform <span class=\"token punctuation\">{</span>\n  required_version = <span class=\"token string\">\">=1.0\"</span>\n\n  required_providers <span class=\"token punctuation\">{</span>\n    azapi = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"azure/azapi\"</span>\n      version = <span class=\"token string\">\"~>1.5\"</span>\n    <span class=\"token punctuation\">}</span>\n    azurerm = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/azurerm\"</span>\n      version = <span class=\"token string\">\"~>3.0\"</span>\n    <span class=\"token punctuation\">}</span>\n    random = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/random\"</span>\n      version = <span class=\"token string\">\"~>3.0\"</span>\n    <span class=\"token punctuation\">}</span>\n    time = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/time\"</span>\n      version = <span class=\"token string\">\"0.9.1\"</span>\n    <span class=\"token punctuation\">}</span>\n    helm = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/helm\"</span>\n      version = <span class=\"token string\">\"~>2.0\"</span>\n    <span class=\"token punctuation\">}</span>\n    kubernetes = <span class=\"token punctuation\">{</span>\n      source  = <span class=\"token string\">\"hashicorp/kubernetes\"</span>\n      version = <span class=\"token string\">\"~>2.0\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nprovider <span class=\"token string\">\"kubernetes\"</span> <span class=\"token punctuation\">{</span>\n  host                   = azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.host\n  client_certificate     = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.client_certificate)\n  client_key             = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.client_key)\n  cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.cluster_ca_certificate)\n<span class=\"token punctuation\">}</span>\n\nprovider <span class=\"token string\">\"helm\"</span> <span class=\"token punctuation\">{</span>\n  kubernetes <span class=\"token punctuation\">{</span>\n    host                   = azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.host\n    client_certificate     = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.client_certificate)\n    client_key             = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.client_key)\n    cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.aks_cluster.kube_config<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.cluster_ca_certificate)\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"variablestf\" style=\"position:relative;\"><a href=\"#variablestf\" aria-label=\"variablestf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>variables.tf</h3>\n<p>main.tf에 정의될 변수들을 미리 선언해둔 파일이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">variable <span class=\"token string\">\"app_name\"</span> <span class=\"token punctuation\">{</span>\n  type        = string\n  description = <span class=\"token string\">\"name of the application\"</span>\n<span class=\"token punctuation\">}</span>\n\nvariable <span class=\"token string\">\"location\"</span> <span class=\"token punctuation\">{</span>\n  type        = string\n  description = <span class=\"token string\">\"location for the resources\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"maintfvals\" style=\"position:relative;\"><a href=\"#maintfvals\" aria-label=\"maintfvals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main.tfvals</h3>\n<p>variables.tf에 선언된 변수들의 실재값이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">app_name = <span class=\"token string\">\"airflow\"</span>\nlocation = <span class=\"token string\">\"koreacentral\"</span></code></pre></div>\n<h3 id=\"maintf\" style=\"position:relative;\"><a href=\"#maintf\" aria-label=\"maintf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main.tf</h3>\n<p>해당 파일은 내가 생성하고자 하는 플랫폼과 제품에 따라서 전부 다르기에 따로 리뷰는 하지 않겠다. 위에있는 terraform 가이드를 살펴보고 스스로 구축을 해보면 된다.\n간단하게만 언급하면 아래와 같다.</p>\n<ul>\n<li>Airflow 로그를 저장하기 위한 Blob 컨테이너를 프로비저닝 코드</li>\n<li>이미지를 가져오기 위한 ACR 프로비저닝 코드</li>\n<li>리소스 그룹 프로비저닝 코드</li>\n<li>기본 노드 풀이 있는 Kubernetes 클러스터 정의</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">resource <span class=\"token string\">\"azurerm_resource_group\"</span> <span class=\"token string\">\"rg\"</span> <span class=\"token punctuation\">{</span>\n  name     = <span class=\"token string\">\"${var.app_name}rg\"</span>\n  location = var.location\n<span class=\"token punctuation\">}</span>\n\n# Azure Kubernetes Cluster\n\nresource <span class=\"token string\">\"azurerm_kubernetes_cluster\"</span> <span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">{</span>\n  name                = <span class=\"token string\">\"${var.app_name}aks\"</span>\n  location            = var.location\n  resource_group_name = azurerm_resource_group.rg.name\n  dns_prefix          = <span class=\"token string\">\"${var.app_name}-aks\"</span>\n\n  default_node_pool <span class=\"token punctuation\">{</span>\n    name       = <span class=\"token string\">\"default\"</span>\n    node_count = <span class=\"token number\">1</span>\n    vm_size    = <span class=\"token string\">\"Standard_DS2_v2\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  identity <span class=\"token punctuation\">{</span>\n    type = <span class=\"token string\">\"SystemAssigned\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  storage_profile <span class=\"token punctuation\">{</span>\n    blob_driver_enabled = <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n# Azure Container Registry\n\nresource <span class=\"token string\">\"azurerm_container_registry\"</span> <span class=\"token string\">\"acr\"</span> <span class=\"token punctuation\">{</span>\n  name                = <span class=\"token string\">\"${var.app_name}acregistry\"</span>\n  resource_group_name = azurerm_resource_group.rg.name\n  location            = var.location\n  sku                 = <span class=\"token string\">\"Standard\"</span>\n  admin_enabled       = <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"azurerm_role_assignment\"</span> <span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">{</span>\n  principal_id         = azurerm_kubernetes_cluster.main.kubelet_identity<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.object_id\n  role_definition_name = <span class=\"token string\">\"AcrPull\"</span>\n  scope                = azurerm_container_registry.acr.id\n<span class=\"token punctuation\">}</span>\n\n# Blob storage for Airflow logs\n\nresource <span class=\"token string\">\"azurerm_storage_account\"</span> <span class=\"token string\">\"airflow\"</span> <span class=\"token punctuation\">{</span>\n  name                     = <span class=\"token string\">\"${var.app_name}airflowlogs\"</span>\n  resource_group_name      = azurerm_resource_group.rg.name\n  location                 = var.location\n  account_tier             = <span class=\"token string\">\"Standard\"</span>\n  account_replication_type = <span class=\"token string\">\"LRS\"</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"azurerm_storage_container\"</span> <span class=\"token string\">\"airflow_logs\"</span> <span class=\"token punctuation\">{</span>\n  name                  = <span class=\"token string\">\"airflow-logs\"</span>\n  storage_account_name  = azurerm_storage_account.airflow.name\n  container_access_type = <span class=\"token string\">\"private\"</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"azurerm_storage_management_policy\"</span> <span class=\"token string\">\"prune_logs\"</span> <span class=\"token punctuation\">{</span>\n  storage_account_id = azurerm_storage_account.airflow.id\n\n  rule <span class=\"token punctuation\">{</span>\n    name    = <span class=\"token string\">\"prune-logs\"</span>\n    enabled = <span class=\"token boolean\">true</span>\n    filters <span class=\"token punctuation\">{</span>\n      prefix_match = <span class=\"token punctuation\">[</span><span class=\"token string\">\"airflow-logs\"</span><span class=\"token punctuation\">]</span>\n      blob_types   = <span class=\"token punctuation\">[</span><span class=\"token string\">\"blockBlob\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    actions <span class=\"token punctuation\">{</span>\n      base_blob <span class=\"token punctuation\">{</span>\n        delete_after_days_since_modification_greater_than = <span class=\"token number\">7</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"azure-인프라-배포를-위한-서비스-주체-생성\" style=\"position:relative;\"><a href=\"#azure-%EC%9D%B8%ED%94%84%EB%9D%BC-%EB%B0%B0%ED%8F%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A3%BC%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"azure 인프라 배포를 위한 서비스 주체 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Azure 인프라 배포를 위한 서비스 주체 생성</h2>\n<p>Azure에 인프라를 배포하려면 먼저 인프라를 배포할 권한이 있는 서비스 주체를 만들어야 한다. 아래처럼 진행해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">az login\n\nexport SUBSCRIPTION_ID=$(az account show --query id -o tsv)\nexport SERVICE_PRINCIPAL_NAME=&quot;InfrastructureAccount&quot;\n\naz ad sp create-for-rbac \\\n    --name $SERVICE_PRINCIPAL_NAME \\\n    --role &quot;Owner&quot; \\\n    --scopes &quot;/subscriptions/$SUBSCRIPTION_ID&quot; &gt; credentials.json</code></pre></div>\n<blockquote>\n<p><font color=\"#c00000\">주의!⚠️⚠️⚠️⚠️⚠️⚠️</font> <br>\n다만 credentials.json의 내용은 비밀로 유지해야 한다. 공개적으로 노출하지 않도록 해야 하기에 혹시라도 github에 게시할 때는 <code class=\"language-text\">.gitignore</code>을 사용 하도록 하자.</p>\n</blockquote>\n<p>또한 Terraform이 서비스 주체로 인증하려면 일부 환경 변수를 설정해야 하는데 아래 코드를 통해 진행 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">export ARM_CLIENT_ID=`cat credentials.json | python -c &#39;import json,sys;obj=json.load(sys.stdin);print(obj[&quot;appId&quot;])&#39;`\nexport ARM_CLIENT_SECRET=`cat credentials.json | python -c &#39;import json,sys;obj=json.load(sys.stdin);print(obj[&quot;password&quot;])&#39;`\nexport ARM_TENANT_ID=`cat credentials.json | python -c &#39;import json,sys;obj=json.load(sys.stdin);print(obj[&quot;tenant&quot;])&#39;`\nexport ARM_SUBSCRIPTION_ID=`az account show --query id -o tsv`</code></pre></div>\n<h2 id=\"aks-클러스터-배포\" style=\"position:relative;\"><a href=\"#aks-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%B0%B0%ED%8F%AC\" aria-label=\"aks 클러스터 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AKS 클러스터 배포</h2>\n<p>이제 배포를 해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">terraform init\nterraform fmt\nterraform validate\nterraform plan\nterraform apply</code></pre></div>\n<p>그럼 생각보다 오래걸리는데 그동안 유튜브 한편 보고와도 좋다.</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQMBrL5LviN7QqpIXek04U-uAZtjNP0bDt0Mqceq2lxFbbY?width=1024\" alt=\"생성중\">\n</div>\n그럼 이렇게 생성되었다고 초록색으로 글씨가 나올 것이다.\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQOwZsSusgahRbOkT2cYObDhATPZGsIU8T2y7KTQlE_vxB0?width=1024\" alt=\"생성완료\">\n</div>\n<p>이제 모든 포트를 나열해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">NAMESPACE     NAME                                  READY   STATUS    RESTARTS   AGE\nkube-system   azure-ip-masq-agent-58pln             1/1     Running   0          20h\nkube-system   cloud-node-manager-glrh9              1/1     Running   0          20h\nkube-system   coredns-76b9877f49-8h6cz              1/1     Running   0          20h\nkube-system   coredns-76b9877f49-pjjdb              1/1     Running   0          20h\nkube-system   coredns-autoscaler-85f7d6b75d-wdbwd   1/1     Running   0          20h\nkube-system   csi-azuredisk-node-mmpxj              3/3     Running   0          20h\nkube-system   csi-azurefile-node-sbw7j              3/3     Running   0          20h\nkube-system   csi-blob-node-jhtnr                   3/3     Running   0          17h\nkube-system   konnectivity-agent-659478b8b7-gpkwv   1/1     Running   0          20h\nkube-system   konnectivity-agent-659478b8b7-zqksv   1/1     Running   0          20h\nkube-system   kube-proxy-c48c8                      1/1     Running   0          20h\nkube-system   metrics-server-c456c67cb-dqv8f        2/2     Running   0          20h\nkube-system   metrics-server-c456c67cb-r9f82        2/2     Running   0          20h</code></pre></div>\n<h2 id=\"helm을-사용하여-airflow-설치\" style=\"position:relative;\"><a href=\"#helm%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-airflow-%EC%84%A4%EC%B9%98\" aria-label=\"helm을 사용하여 airflow 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Helm을 사용하여 Airflow 설치</h2>\n<p>이제 <a href=\"https://github.com/apache/airflow/tree/main/chart\">Airflow Helm 차트</a>를 이용해서 Airflow를 설치해보자</p>\n<p>먼저 아래와 같은 <code class=\"language-text\">valuse.yaml</code> 파일을 만들어준다.</p>\n<h3 id=\"valuesyaml\" style=\"position:relative;\"><a href=\"#valuesyaml\" aria-label=\"valuesyaml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>values.yaml</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">\n<span class=\"token comment\"># Select certain nodes for airflow pods.</span>\n<span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">agentpool</span><span class=\"token punctuation\">:</span> default\n\n<span class=\"token comment\"># Airflow executor</span>\n<span class=\"token key atrule\">executor</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'KubernetesExecutor'</span>\n\n<span class=\"token comment\"># Environment variables for all airflow containers</span>\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ENVIRONMENT\n    <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> dev\n\n<span class=\"token key atrule\">extraEnv</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n  - name: AIRFLOW__CORE__DEFAULT_TIMEZONE\n    value: 'Asia/Seoul'</span>\n\n<span class=\"token comment\"># Configuration for postgresql subchart</span>\n<span class=\"token comment\"># Not recommended for production! Instead, spin up your own Postgresql server and use the `data`</span>\n<span class=\"token comment\"># attribute in this yaml file.</span>\n<span class=\"token key atrule\">postgresql</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token comment\"># Enable pgbouncer.</span>\n<span class=\"token comment\"># See https://airflow.apache.org/docs/helm-chart/stable/production-guide.html#pgbouncer</span>\n<span class=\"token key atrule\">pgbouncer</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> true<span class=\"token punctuation\">></span></code></pre></div>\n<h2 id=\"dag를-동기화하기-위한-gitsync\" style=\"position:relative;\"><a href=\"#dag%EB%A5%BC-%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-gitsync\" aria-label=\"dag를 동기화하기 위한 gitsync permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DAG를 동기화하기 위한 GitSync</h2>\n<p>이제 DAG와 Github Repo를 동기화 해주어야 한다. 그 과정에서 SSH 인증키를 만들고 GIt hub 저장소에 배포키로 추가하면 된다.</p>\n<h3 id=\"ssh-key-생성\" style=\"position:relative;\"><a href=\"#ssh-key-%EC%83%9D%EC%84%B1\" aria-label=\"ssh key 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ssh-key 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">ssh-keygen -t rsa -b 4096 -C &quot;your@email.com&quot;\n\ncat ~/.ssh/airflowsshkey.pub</code></pre></div>\n<h3 id=\"namespace-생성-후-valuesyaml-마무리\" style=\"position:relative;\"><a href=\"#namespace-%EC%83%9D%EC%84%B1-%ED%9B%84-valuesyaml-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"namespace 생성 후 valuesyaml 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>namespace 생성 후 values.yaml 마무리</h3>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">kubectl create namespace airflow\n\nkubectl create secret generic -n airflow airflow-git-ssh-secret \\\n\t--from-file=gitSshKey=$HOME/.ssh/airflowsshkey</code></pre></div>\n<p>그리고 아래 내용을 values.yaml 파일에 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">gitSync</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> &lt;본인 Repo ssh<span class=\"token punctuation\">></span>\n    <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main\n    <span class=\"token key atrule\">rev</span><span class=\"token punctuation\">:</span> HEAD\n    <span class=\"token key atrule\">depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token key atrule\">maxFailures</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token key atrule\">subPath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'dags'</span>\n    <span class=\"token key atrule\">sshKeySecret</span><span class=\"token punctuation\">:</span> airflow<span class=\"token punctuation\">-</span>git<span class=\"token punctuation\">-</span>ssh<span class=\"token punctuation\">-</span>secret\n    <span class=\"token key atrule\">knownHosts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n      github.com ssh-rsa &lt;secret key></span></code></pre></div>\n<p>위 내용은 main 브렌치의 dags 폴더를 동기화하겠다는 단순한 뜻이다. <br>\n다만, 여기서 주의할 점이 ssh-rsa 다음에 오는 key는 방금 생성한 키가 아니라 GitHub 서버의 호스트 키를 말하는 것이다. 아래 공식문서를 잘 살펴보자</p>\n<ul>\n<li><a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\">GitHub의 SSH 키 Fingerprints 공식 문서</a></li>\n</ul>\n<h2 id=\"blob을-사용한-로그-저장\" style=\"position:relative;\"><a href=\"#blob%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B7%B8-%EC%A0%80%EC%9E%A5\" aria-label=\"blob을 사용한 로그 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>blob을 사용한 로그 저장</h2>\n<p>다음은 로그 저장소를 설정하는 것이다. 보통 pv 및 pvc를 사용해서 저장한다. 나는 airflow라는 디렉토리를 만들어서 저장했다.</p>\n<h3 id=\"pv-logsyaml\" style=\"position:relative;\"><a href=\"#pv-logsyaml\" aria-label=\"pv logsyaml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pv-logs.yaml</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolume\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pv<span class=\"token punctuation\">-</span>airflow<span class=\"token punctuation\">-</span>logs\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> local\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">capacity</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 5Gi\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">persistentVolumeReclaimPolicy</span><span class=\"token punctuation\">:</span> Retain <span class=\"token comment\"># If set as \"Delete\" container would be removed after pvc deletion</span>\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> azureblob<span class=\"token punctuation\">-</span>fuse<span class=\"token punctuation\">-</span>premium\n  <span class=\"token key atrule\">mountOptions</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>o allow_other\n    <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>file<span class=\"token punctuation\">-</span>cache<span class=\"token punctuation\">-</span>timeout<span class=\"token punctuation\">-</span>in<span class=\"token punctuation\">-</span>seconds=120\n  <span class=\"token key atrule\">csi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> blob.csi.azure.com\n    <span class=\"token key atrule\">readOnly</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n    <span class=\"token key atrule\">volumeHandle</span><span class=\"token punctuation\">:</span> airflow<span class=\"token punctuation\">-</span>logs<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n    <span class=\"token key atrule\">volumeAttributes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">resourceGroup</span><span class=\"token punctuation\">:</span> airflowrg\n      <span class=\"token key atrule\">storageAccount</span><span class=\"token punctuation\">:</span> airflowairflowsa\n      <span class=\"token key atrule\">containerName</span><span class=\"token punctuation\">:</span> airflow<span class=\"token punctuation\">-</span>logs\n    <span class=\"token key atrule\">nodeStageSecretRef</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> storage<span class=\"token punctuation\">-</span>account<span class=\"token punctuation\">-</span>credentials\n      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> airflow</code></pre></div>\n<h3 id=\"pvc-logsyaml\" style=\"position:relative;\"><a href=\"#pvc-logsyaml\" aria-label=\"pvc logsyaml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pvc-logs.yaml</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pvc<span class=\"token punctuation\">-</span>airflow<span class=\"token punctuation\">-</span>logs\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> azureblob<span class=\"token punctuation\">-</span>fuse<span class=\"token punctuation\">-</span>premium\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 5Gi\n  <span class=\"token key atrule\">volumeName</span><span class=\"token punctuation\">:</span> pv<span class=\"token punctuation\">-</span>airflow<span class=\"token punctuation\">-</span>logs</code></pre></div>\n<p>PersistentVolume과 PersistentVolumeClaim을 프로비저닝 하는 코드를 짰으므로 당연히 해당 리소스에 대해서도 secret을 정의해주어야 한다. 아래 코드로 간단하게 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">STORAGE_ACCOUNT_KEY</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>az storage account keys list <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-g</span> airflowrg <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-n</span> airflowairflowlogs <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">--query</span> <span class=\"token string\">'[0]'</span>.value <span class=\"token punctuation\">\\</span>\n        <span class=\"token parameter variable\">-o</span> tsv<span class=\"token variable\">)</span></span>\n\nkubectl create secret generic <span class=\"token parameter variable\">-n</span> airflow storage-account-credentials <span class=\"token punctuation\">\\</span>\n\t--from-literal <span class=\"token assign-left variable\">azurestorageaccountname</span><span class=\"token operator\">=</span>airflowairflowsa <span class=\"token punctuation\">\\</span>\n\t--from-literal <span class=\"token assign-left variable\">azurestorageaccountkey</span><span class=\"token operator\">=</span><span class=\"token variable\">$STORAGE_ACCOUNT_KEY</span> <span class=\"token punctuation\">\\</span>\n\t<span class=\"token parameter variable\">--type</span><span class=\"token operator\">=</span>Opaque</code></pre></div>\n<p>그리고 적용해주자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-n</span> airflow <span class=\"token parameter variable\">-f</span> airflow/pv-logs.yaml\nkubectl apply <span class=\"token parameter variable\">-n</span> airflow <span class=\"token parameter variable\">-f</span> airflow/pvc-logs.yaml</code></pre></div>\n<h2 id=\"valuesyaml-파일-마무리\" style=\"position:relative;\"><a href=\"#valuesyaml-%ED%8C%8C%EC%9D%BC-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"valuesyaml 파일 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>values.yaml 파일 마무리</h2>\n<p>이제 설정 파일인 values.yaml파일을 마무리 해줄거다 여기서 logGroomerSidecar 부분은 전부 비활성화 처리 했다 Terraform 코드에서 blob 컨테이너에 대한 로그 정리 정책을 이미 정의했기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">logs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">persistence</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">existingClaim</span><span class=\"token punctuation\">:</span> pvc<span class=\"token punctuation\">-</span>airflow<span class=\"token punctuation\">-</span>logs\n    <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> azureblob<span class=\"token punctuation\">-</span>fuse<span class=\"token punctuation\">-</span>premium\n\n<span class=\"token comment\"># We disable the log groomer sidecar because we use Azure Blob Storage for logs,</span>\n<span class=\"token comment\"># where a lifecycle policy is already set</span>\n<span class=\"token key atrule\">triggerer</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">logGroomerSidecar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n<span class=\"token key atrule\">scheduler</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">logGroomerSidecar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n<span class=\"token key atrule\">workers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">logGroomerSidecar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></code></pre></div>\n<h2 id=\"airflow-설치\" style=\"position:relative;\"><a href=\"#airflow-%EC%84%A4%EC%B9%98\" aria-label=\"airflow 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>airflow 설치</h2>\n<p>이제 설치 하자!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">helm repo <span class=\"token function\">add</span> apache-airflow https://airflow.apache.org\n\nhelm <span class=\"token function\">install</span> airflow apache-airflow/airflow <span class=\"token parameter variable\">-n</span> airflow <span class=\"token parameter variable\">-f</span> airflow/values.yaml <span class=\"token parameter variable\">--debug</span>\n\nkubectl port-forward svc/airflow-webserver <span class=\"token number\">8080</span>:8080 <span class=\"token parameter variable\">-n</span> airflow</code></pre></div>\n<h2 id=\"test-build를-위해-acr에-이미지-등록하기\" style=\"position:relative;\"><a href=\"#test-build%EB%A5%BC-%EC%9C%84%ED%95%B4-acr%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\" aria-label=\"test build를 위해 acr에 이미지 등록하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>test build를 위해 ACR에 이미지 등록하기</h2>\n<p>우선 Hello World!가 출력되는 매우 간단한 컨테이너를 만들어 ACR에 업로드 해보자</p>\n<h3 id=\"dockerfile\" style=\"position:relative;\"><a href=\"#dockerfile\" aria-label=\"dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DockerFile</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> alpine:latest</span>\n\n<span class=\"token comment\"># The command to run when the container starts</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"echo\"</span>, <span class=\"token string\">\"hello world\"</span>]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">docker build -t example .\ndocker run example</code></pre></div>\n<h3 id=\"docker-buildsh\" style=\"position:relative;\"><a href=\"#docker-buildsh\" aria-label=\"docker buildsh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker-build.sh</h3>\n<p>그 다음 acr에 로그인을 해준 후 ACR Portal에 있는 acr_id와 master key를 가져와준다. Portal에 가면 쉽게 확인이 가능하다.!</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">az acr login --name airflowacregistry</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token assign-left variable\">acr_id</span><span class=\"token operator\">=</span><span class=\"token string\">\"airflowacregistry.azurecr.io\"</span>\n<span class=\"token assign-left variable\">image_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"aksdag\"</span> <span class=\"token comment\"># could be any image name</span>\n<span class=\"token function\">docker</span> login <span class=\"token string\">\"<span class=\"token variable\">$acr_id</span>\"</span> <span class=\"token parameter variable\">-u</span> <span class=\"token string\">'&lt;ACR리소스 name>'</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"&lt;ACR master key>\"</span>\n<span class=\"token function\">docker</span> build <span class=\"token parameter variable\">--tag</span> <span class=\"token string\">\"<span class=\"token variable\">$acr_id</span>/<span class=\"token variable\">$image_name</span>:latest\"</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">docker</span> push <span class=\"token string\">\"<span class=\"token variable\">$acr_id</span>/<span class=\"token variable\">$image_name</span>:latest\"</span></code></pre></div>\n<p>아래 명령어로 이미지가 잘 ACR에 등록되었는지 확인도 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre class=\"language-zsh\"><code class=\"language-zsh\">az acr repository list --name airflowacregistry --output table</code></pre></div>\n<h2 id=\"airflow에서-첫-번째-dag-실행\" style=\"position:relative;\"><a href=\"#airflow%EC%97%90%EC%84%9C-%EC%B2%AB-%EB%B2%88%EC%A7%B8-dag-%EC%8B%A4%ED%96%89\" aria-label=\"airflow에서 첫 번째 dag 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Airflow에서 첫 번째 DAG 실행</h2>\n<p>일단 아까전에 gitSync에서 적었던 git링크를 기억하는가?? 그 레포의 다음 경로에 들어가서 airflowsshkey.pub 안에 있는 키를 deploy key에 등록해준다.</p>\n<ul>\n<li><code class=\"language-text\">Setting</code> -> <code class=\"language-text\">DeployKey</code></li>\n</ul>\n<h3 id=\"dags-폴더에-dag-저장\" style=\"position:relative;\"><a href=\"#dags-%ED%8F%B4%EB%8D%94%EC%97%90-dag-%EC%A0%80%EC%9E%A5\" aria-label=\"dags 폴더에 dag 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dags 폴더에 DAG 저장</h3>\n<p>ACR에 저장 했던 이미지를 빌드하는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">from</span> airflow <span class=\"token keyword\">import</span> DAG\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>kubernetes_pod_operator <span class=\"token keyword\">import</span> KubernetesPodOperator\n\ndefault_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"retries\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"start_date\"</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"image_pull_policy\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Always\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> DAG<span class=\"token punctuation\">(</span>\n    dag_id<span class=\"token operator\">=</span><span class=\"token string\">\"simple_kubernetes_dag\"</span><span class=\"token punctuation\">,</span>\n    schedule_interval<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n    default_args<span class=\"token operator\">=</span>default_args<span class=\"token punctuation\">,</span>\n    catchup<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    tags<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    max_active_runs<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dag<span class=\"token punctuation\">:</span>\n    simple_task <span class=\"token operator\">=</span> KubernetesPodOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">\"simple_echo_task\"</span><span class=\"token punctuation\">,</span>\n        image<span class=\"token operator\">=</span><span class=\"token string\">\"airflowacregistry.azurecr.io/example:latest\"</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">=</span><span class=\"token string\">\"simple-airflow-task\"</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<p>짠! 그럼 이제 아래 처럼 내가 만든 DAG가 무사히 airflow 내에 안착된것을 알 수 있다.ㅎㅎ</p>\n<div align=\"center\">\n    <img src=\"https://1drv.ms/i/c/9ded56be8cf81c92/IQMLIOQC3j8iRZogFySybvL_Ae6JgpuQQ6AF8Oali7Wm9L0?width=1024\" alt=\"airflow\">\n</div>\n<p>DAG를 수동으로 트리거 하고 다음 메세지 까지 떴다면 완료다:)</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span><span class=\"token number\">2024</span>-08-05, 08:36:51 UTC<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>pod_manager.py:235<span class=\"token punctuation\">}</span> INFO - hello world</code></pre></div>\n<h2 id=\"마무리-하며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC-%ED%95%98%EB%A9%B0\" aria-label=\"마무리 하며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리 하며..</h2>\n<p>완성했다!! 사실 더 고도화 하고 싶었는데 일단 현재 Azure Function 만드는데도 여러가지 이슈가 있기에 나중에 기회가 되면 argo CD 등으로 CI/CD 하는 것도 해보려구 한다. 점점 데엔에서 Devops 쪽을 건드리는 기분이지만 아무렴 재밌는데 뭐 어쩌겠는가</p>\n<p>위 코드에 대한 정보는 아래 나의 깃허브에 있다:) <br>\n<a href=\"https://github.com/StatisticsFox/terraform-aks-cluster-setup\">terraform-aks-cluster-setup</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">들어가기에 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#prerequisites\">Prerequisites</a></p>\n</li>\n<li>\n<p><a href=\"#terraform%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-aks-%EA%B5%AC%EC%84%B1\">Terraform을 이용한 AKS 구성</a></p>\n<ul>\n<li><a href=\"#providerstf\">providers.tf</a></li>\n<li><a href=\"#variablestf\">variables.tf</a></li>\n<li><a href=\"#maintfvals\">main.tfvals</a></li>\n<li><a href=\"#maintf\">main.tf</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#azure-%EC%9D%B8%ED%94%84%EB%9D%BC-%EB%B0%B0%ED%8F%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A3%BC%EC%B2%B4-%EC%83%9D%EC%84%B1\">Azure 인프라 배포를 위한 서비스 주체 생성</a></p>\n</li>\n<li>\n<p><a href=\"#aks-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%B0%B0%ED%8F%AC\">AKS 클러스터 배포</a></p>\n</li>\n<li>\n<p><a href=\"#helm%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-airflow-%EC%84%A4%EC%B9%98\">Helm을 사용하여 Airflow 설치</a></p>\n<ul>\n<li><a href=\"#valuesyaml\">values.yaml</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dag%EB%A5%BC-%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-gitsync\">DAG를 동기화하기 위한 GitSync</a></p>\n<ul>\n<li><a href=\"#ssh-key-%EC%83%9D%EC%84%B1\">ssh-key 생성</a></li>\n<li><a href=\"#namespace-%EC%83%9D%EC%84%B1-%ED%9B%84-valuesyaml-%EB%A7%88%EB%AC%B4%EB%A6%AC\">namespace 생성 후 values.yaml 마무리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#blob%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B7%B8-%EC%A0%80%EC%9E%A5\">blob을 사용한 로그 저장</a></p>\n<ul>\n<li><a href=\"#pv-logsyaml\">pv-logs.yaml</a></li>\n<li><a href=\"#pvc-logsyaml\">pvc-logs.yaml</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#valuesyaml-%ED%8C%8C%EC%9D%BC-%EB%A7%88%EB%AC%B4%EB%A6%AC\">values.yaml 파일 마무리</a></p>\n</li>\n<li>\n<p><a href=\"#airflow-%EC%84%A4%EC%B9%98\">airflow 설치</a></p>\n</li>\n<li>\n<p><a href=\"#test-build%EB%A5%BC-%EC%9C%84%ED%95%B4-acr%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\">test build를 위해 ACR에 이미지 등록하기</a></p>\n<ul>\n<li><a href=\"#dockerfile\">DockerFile</a></li>\n<li><a href=\"#docker-buildsh\">docker-build.sh</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#airflow%EC%97%90%EC%84%9C-%EC%B2%AB-%EB%B2%88%EC%A7%B8-dag-%EC%8B%A4%ED%96%89\">Airflow에서 첫 번째 DAG 실행</a></p>\n<ul>\n<li><a href=\"#dags-%ED%8F%B4%EB%8D%94%EC%97%90-dag-%EC%A0%80%EC%9E%A5\">dags 폴더에 DAG 저장</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC-%ED%95%98%EB%A9%B0\">마무리 하며..</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 11, 2024","title":"Terraform으로 AKS에 airflow 띄우고 git으로 DAG 관리하기","categories":"Data_Engineering","author":"최지혁","emoji":"🍤"},"fields":{"slug":"/Data Engineering/Terraform으로 AKS에 airflow 띄우고 git으로 DAG 관리하기/"}},"prev":{"id":"d65508b6-6427-511e-9cb6-6ddb7e63e3ab","html":"<h2 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h2>\n<p>최근에 BOAZ 동아리에서 Oauto2와 goole calender를 이용해서 웹 서비스를 만드는 프로젝트를 진행하는데(<del>계획에 전혀없던 리액트까지 써보는중🥲</del>) 전반적인 인프라 구성을 내가 맡았다. 이때, 도메인을 AWS EC2에 등록하는 과정에서 로드밸런서를 사용하게 되었다. ALB 로드 밸런서에 SSL 인증을 적용하면 각 Ec2 인스턴스 마다 SSL을 처리하지 않아도 HTTPS 트래픽을 처리할 수 있기에 반드시 필요한 부분이었다. 그 과정에서 로드 밸런서를 단순히 “그냥 부하분산 아님?”으로 알고 있던 나에게 개념정리가 꼭 필요한 부분이라 이번 글을 작성하게 되었다. 그럼 시작해보자\n<img src=\"https://onedrive.live.com/embed?resid=9DED56BE8CF81C92%21211&#x26;authkey=%21AInaQqp_g1hhKd0&#x26;width=564&#x26;height=311\" alt=\"시작해보자\"></p>\n<h2 id=\"core\" style=\"position:relative;\"><a href=\"#core\" aria-label=\"core permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Core</h2>\n<p>기본적으로 로드밸런서는 Scale out에서 사용된다. 서비스는 성장하는데 늘어나는 트래픽을 서버가 감당할 수 없을때 서버를 증설하는데 이 과정에서 각 서버에 걸리는 부하를 고르게 나누기 위해서는 로드밸런싱이 필수적으로 동반되어야 한다.</p>\n<blockquote>\n<p>즉 다양한 곳에서 들어오는<font color=\"#c00000\"> 트래픽을 여러 서버에 분산</font>시켜 하나의 서버에 부담이 가지 않도록 하는 것이 로드밸런싱의 주요 목적이며, 이를 통해 <font color=\"#c00000\">서버의 성능과 안정성을 높일 수 있다.</font></p>\n</blockquote>\n<h2 id=\"로드밸런싱의-이점\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1%EC%9D%98-%EC%9D%B4%EC%A0%90\" aria-label=\"로드밸런싱의 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로드밸런싱의 이점</h2>\n<h3 id=\"가용성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9A%A9%EC%84%B1\" aria-label=\"가용성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가용성</h3>\n<p>서버에 장애가 발생하거나 업데이트를 해야 하는 상황에 서버가 가동 중지된다면 애플리케이션은 사용할 수 없다. 로드밸런서는 이러한 문제를 자동으로 감지하고 사용가능한 서버로 리다이렉션하는 관리자 같은 역할을 한다.</p>\n<h3 id=\"확장성\" style=\"position:relative;\"><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\" aria-label=\"확장성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장성</h3>\n<p>한 서버에 트래픽이 몰리는 병목현상을 방지하고 트래픽을 예측하여 다른 서버를 추가하거나 제거한다.</p>\n<h3 id=\"보안\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88\" aria-label=\"보안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안</h3>\n<p>크롤링이나 악성 프로그램 등 공격자가 서버 장애를 일으키는 수백만 개의 동시 요청으로 애플리케이션 서버를 가득 채우는 공격을 방지하거나 최소화한다.</p>\n<h3 id=\"성능\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5\" aria-label=\"성능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능</h3>\n<p>응답 시간을 늘리고 네트워크 지연 시간을 줄여 애플리케이션 성능을 향상합니다.</p>\n<h2 id=\"로드밸런싱-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"로드밸런싱 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로드밸런싱 알고리즘</h2>\n<p>로드벨런싱에도 여러 알고즘이 존재하는데 가장 흔한 것이 라운드 로빈, 가중치 분배, 최소연결 방식이 있다. 다만 서로 다른 적합한 케이스가 존재하기 때문에 사용환경에 따라 적절한 로드 밸런서를 선택해야 한다.</p>\n<p>먼저 정적 로드 밸런싱에 대해서 알아보자</p>\n<h3 id=\"라운드-로빈-방식round-robin-method\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EB%B0%A9%EC%8B%9Dround-robin-method\" aria-label=\"라운드 로빈 방식round robin method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라운드 로빈 방식(Round Robin Method)</h3>\n<p>포커 칠때 딜러가 카드 돌리는 것을 생각하면 된다. 딜러가 카드를 왼쪽 사람부터 차례차례 카드를 건내주고 마지막 사람까지 다 주면 다시 처음 줬단 사람으로 되돌아가 주는 것을 반복하는데 해당 방식도 서버 A, B, C 가 있다면 A → B → C → A 순서대로 분배한다. 보통 모든 서버가 같은 양일때 이렇게 한다.</p>\n<h3 id=\"가중치-기반-라운드-로빈-방식weighted-round-robin-method\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%A4%91%EC%B9%98-%EA%B8%B0%EB%B0%98-%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EB%B0%A9%EC%8B%9Dweighted-round-robin-method\" aria-label=\"가중치 기반 라운드 로빈 방식weighted round robin method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가중치 기반 라운드 로빈 방식(Weighted Round Robin Method)</h3>\n<p>여러 서버가 같은 사양이 아니고, 특정 서버의 스펙이 더 좋은 경우 이 방식을 사용한다. 5살짜리와 20살짜리가 밥을 먹는데 당연히 20살 짜리에게 밥을 더 많이 주는 것처럼 그릇 큰놈한테 트래픽 처리량 몰아주는 방식이다.</p>\n<h3 id=\"ip-해시-방식ip-hash-method\" style=\"position:relative;\"><a href=\"#ip-%ED%95%B4%EC%8B%9C-%EB%B0%A9%EC%8B%9Dip-hash-method\" aria-label=\"ip 해시 방식ip hash method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IP 해시 방식(IP Hash Method)</h3>\n<p>여기서는 수학적 계산인 해싱이라는 기법이 들어가는데 사용자 ip를 기준으로 해싱하여 사용자가 항상 동일한 서버로 연결되는 것을 보장한다. 우리 집 와이파이로 어떤 서비스에 접속하면 우리집 와이파이는 그 서비스의 항상 같은 서버로 연결된다.</p>\n<p>다음은 동적 로드 밸런싱에 대해 알아보자</p>\n<h3 id=\"최소-연결-방법least-connection-method\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C-%EC%97%B0%EA%B2%B0-%EB%B0%A9%EB%B2%95least-connection-method\" aria-label=\"최소 연결 방법least connection method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최소 연결 방법(Least Connection Method)</h3>\n<p>모든 서버가 같은 스펙을 지닌것을 가정하고 적용하는 방식으로 한마디로 ‘저울’과 같다. 연결이 적은 서버를 확인하고 그 서버로 트래픽을 분할한다. 저울이 평행할 수 있도록!</p>\n<h3 id=\"최소-응답-시간-방법least-response-time-method\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C-%EC%9D%91%EB%8B%B5-%EC%8B%9C%EA%B0%84-%EB%B0%A9%EB%B2%95least-response-time-method\" aria-label=\"최소 응답 시간 방법least response time method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최소 응답 시간 방법(Least Response Time Method)</h3>\n<p>이 방식은 개발자가 아닌 사용자가 얼마나 더 만족할까를 고민한 흔적이 보이는 로드밸런싱이다. 즉, 서버의 현재 연결상태 그리고 응답시간을 고려해서 가장 짧은 응답시간을 보내는 서버로 트래픽을 할당한다. 즉 한 서버에 여유가 없더라도 조건에 부합한다면 그 서버에 트래픽을 할당한다.</p>\n<h2 id=\"aws-로드-밸런서-유형\" style=\"position:relative;\"><a href=\"#aws-%EB%A1%9C%EB%93%9C-%EB%B0%B8%EB%9F%B0%EC%84%9C-%EC%9C%A0%ED%98%95\" aria-label=\"aws 로드 밸런서 유형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS 로드 밸런서 유형</h2>\n<p>솔직히 한번에 이해하는건 어렵기 때문에 경찰에 비유해서 설명해 보고자 한다.</p>\n<h3 id=\"albapplication-load-balancer\" style=\"position:relative;\"><a href=\"#albapplication-load-balancer\" aria-label=\"albapplication load balancer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ALB(Application Load Balancer)</h3>\n<p>먼저 ALB는 HTTP/HTTPS 기반으로 요청을 관리하는 즉, 경찰서 들어가면 앞에 앉은 말단 경찰이다. 그들은 시민과 직접 대화하기에 세심하게 신고인의 요구를 파악하고 관련 부서로 연결을 해준다.</p>\n<ul>\n<li>예를 들어 “사기를 당했어요..” 라고 하면 사이버 범죄일까요? 아니면 금융, 피싱? 이렇게 물어본 후 각 상황에 맞는 부서에 연결 시켜 준다.</li>\n<li>즉, ALB는 HTTP 요청을 매우 세세하게 분석해서 그 요청에 맞는 서버로 트래픽을 보낸다. 사용자마다 다른 페이지나 기능으로 연결할때 매우 유용하다.</li>\n</ul>\n<h3 id=\"nlbnetwork-load-balancer\" style=\"position:relative;\"><a href=\"#nlbnetwork-load-balancer\" aria-label=\"nlbnetwork load balancer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NLB(Network Load Balancer)</h3>\n<p>NLB는 TCP/UDP 기반으로 트래픽을 처리하는 로드 밸런서로 교차로에서 차들이 오갈 때 신호를 보고 빠르게 교통 흐름을 관리하는 교통경찰과 비슷하다.</p>\n<ul>\n<li>교통경찰들은 이 차가 무슨 차인지 어떤 목적을 가지고 가는 차인지 관심 없고 그냥 신호가 맞으면 빠르게 통과시킨다.</li>\n<li>이처럼 세부적인 정보보다는 IP 주소나 TCP 연결을 기반으로 트래픽을 빠르게 처리하고, 고속 통신이 필요한 비스에 적합하다.</li>\n</ul>\n<h3 id=\"elbelastic-load-balancer\" style=\"position:relative;\"><a href=\"#elbelastic-load-balancer\" aria-label=\"elbelastic load balancer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ELB(Elastic Load Balancer)</h3>\n<p>ELB는 기본적인 트래픽 관리 기능만 제공하는 비교적 간단한 녀석이다. 예를들면 단순히 경찰청 사이트라고 생각하면 되겠다.</p>\n<ul>\n<li>인터넷 사기 당했는데 어디로 갈까요 라고 물어보면 단순히 사기 담당 부서 위치만 알려주고 끝내는 느낌이다.</li>\n<li>즉, 요즘은 ALB나 NLB처럼 더 세부적이거나 빠른 트래픽 처리를 위한 로드 밸런서가 더 많이 사용한다.</li>\n</ul>\n<h2 id=\"따라서\" style=\"position:relative;\"><a href=\"#%EB%94%B0%EB%9D%BC%EC%84%9C\" aria-label=\"따라서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>따라서..</h2>\n<blockquote>\n<ul>\n<li>ALB: 웹 애플리케이션에서 사용자마다 맞춤형 응답이 필요한 경우.</li>\n<li>NLB: 빠른 네트워크 트래픽 처리, 실시간 데이터 전송이 필요한 경우.</li>\n<li>ELB: 간단한 트래픽 관리가 필요한 경우, 예전부터 사용된 안정적인 방식.</li>\n</ul>\n</blockquote>\n<p>이렇게 로드 밸런서의 개념과 AWS에 있는 3가지 로드 밸런서에 대해 알아보았다. 세월이 지나면 분명 까먹을 것이 뻔하기 때문에 최대한 쉽게 이해하려고 노력해봤다 ㅎ. 로드 밸런서 하면 뭐다? 경찰이다~~ 하면 이 내용들이 머리속에서 잘 생각나지 않을까 한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">들어가기에 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#core\">Core</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1%EC%9D%98-%EC%9D%B4%EC%A0%90\">로드밸런싱의 이점</a></p>\n<ul>\n<li><a href=\"#%EA%B0%80%EC%9A%A9%EC%84%B1\">가용성</a></li>\n<li><a href=\"#%ED%99%95%EC%9E%A5%EC%84%B1\">확장성</a></li>\n<li><a href=\"#%EB%B3%B4%EC%95%88\">보안</a></li>\n<li><a href=\"#%EC%84%B1%EB%8A%A5\">성능</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">로드밸런싱 알고리즘</a></p>\n<ul>\n<li><a href=\"#%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EB%B0%A9%EC%8B%9Dround-robin-method\">라운드 로빈 방식(Round Robin Method)</a></li>\n<li><a href=\"#%EA%B0%80%EC%A4%91%EC%B9%98-%EA%B8%B0%EB%B0%98-%EB%9D%BC%EC%9A%B4%EB%93%9C-%EB%A1%9C%EB%B9%88-%EB%B0%A9%EC%8B%9Dweighted-round-robin-method\">가중치 기반 라운드 로빈 방식(Weighted Round Robin Method)</a></li>\n<li><a href=\"#ip-%ED%95%B4%EC%8B%9C-%EB%B0%A9%EC%8B%9Dip-hash-method\">IP 해시 방식(IP Hash Method)</a></li>\n<li><a href=\"#%EC%B5%9C%EC%86%8C-%EC%97%B0%EA%B2%B0-%EB%B0%A9%EB%B2%95least-connection-method\">최소 연결 방법(Least Connection Method)</a></li>\n<li><a href=\"#%EC%B5%9C%EC%86%8C-%EC%9D%91%EB%8B%B5-%EC%8B%9C%EA%B0%84-%EB%B0%A9%EB%B2%95least-response-time-method\">최소 응답 시간 방법(Least Response Time Method)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#aws-%EB%A1%9C%EB%93%9C-%EB%B0%B8%EB%9F%B0%EC%84%9C-%EC%9C%A0%ED%98%95\">AWS 로드 밸런서 유형</a></p>\n<ul>\n<li><a href=\"#albapplication-load-balancer\">ALB(Application Load Balancer)</a></li>\n<li><a href=\"#nlbnetwork-load-balancer\">NLB(Network Load Balancer)</a></li>\n<li><a href=\"#elbelastic-load-balancer\">ELB(Elastic Load Balancer)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%94%B0%EB%9D%BC%EC%84%9C\">따라서..</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 08, 2024","title":"Load Balancer란? Feat. AWS","categories":"Data_Engineering Cloud","author":"최지혁","emoji":"🛠️"},"fields":{"slug":"/Cloud/Loadbalancer/"}},"site":{"siteMetadata":{"siteUrl":"https://statisticsfox.github.io","comments":{"utterances":{"repo":"StatisticsFox/blog-comments"}}}}},"pageContext":{"slug":"/Data Engineering/nginx로 Spark, Yarn, kafkaui 구성하기/","nextSlug":"/Data Engineering/Terraform으로 AKS에 airflow 띄우고 git으로 DAG 관리하기/","prevSlug":"/Cloud/Loadbalancer/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}