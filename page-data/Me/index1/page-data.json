{"componentChunkName":"component---src-templates-blog-template-js","path":"/Me/index1/","result":{"data":{"cur":{"id":"ddf0ca2c-eac3-579d-948a-a3830b83ae30","html":"<h1 id=\"행복에-대해서\" style=\"position:relative;\"><a href=\"#%ED%96%89%EB%B3%B5%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\" aria-label=\"행복에 대해서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>행복에 대해서</h1>\n<p>오늘은 내가 짧게나마 ‘행복’이란 무엇일까에 대해 고민한 내용을 공유할까 한다. 최근에 인문학을 공부하면서 나에게 적용하는 등 여러가지 생각을 하고 있다. 예전에 ‘불안’(아직 글은 안썼음)에 대해서 정의를 해봤는데 이제는 행복에 대해서도 깊게 생각해보고 싶어서 “최근에는 행복이란 무엇일까”에 대해서 고민을 해보았다.</p>\n<h2 id=\"나는-언제-행복할까\" style=\"position:relative;\"><a href=\"#%EB%82%98%EB%8A%94-%EC%96%B8%EC%A0%9C-%ED%96%89%EB%B3%B5%ED%95%A0%EA%B9%8C\" aria-label=\"나는 언제 행복할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나는 언제 행복할까</h2>\n<p>그렇다면 나는 언제 행복할까, 궁극적으로 행복에 대해서 정의하기 이전에 단순하게 나는 언제 행복한지에 대해 고민해봤다. 나는 아래와 같은 상황일때 행복을 느꼈던 것 같다.</p>\n<ul>\n<li>하루를 다 마치고 친구들이랑 게임할때</li>\n<li>평일에 늦잠잘때</li>\n<li>사람 많이 없을때 맛집 가서 맛있는거 먹을때</li>\n<li>분위기 좋은 카페가서 여유롭게 책을 읽을때</li>\n<li>새로운  사람을 만나서 이야기를 공유할때</li>\n</ul>\n<p>아주 평범하고 누구나 특별히 게임을 안좋아한다거나 하는게 아닌 이상 대부분 행복을 느낄 것이라고 생각한다. 때문에 일반화하고 정의하기가 막막했는데 내가 예전에 불안에 대해서 생각했던 것과 자연스럽게 사고가 연결되어 어렴풋이 말로써 정의할 수 있게 되었다.</p>\n<h2 id=\"행복의-조건은-말--생각--행동이다\" style=\"position:relative;\"><a href=\"#%ED%96%89%EB%B3%B5%EC%9D%98-%EC%A1%B0%EA%B1%B4%EC%9D%80-%EB%A7%90--%EC%83%9D%EA%B0%81--%ED%96%89%EB%8F%99%EC%9D%B4%EB%8B%A4\" aria-label=\"행복의 조건은 말  생각  행동이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>행복의 조건은 ‘말 == 생각 == 행동’이다.</h2>\n<p>나는 말과 생각과 행동이 일치할때 행복하다고 생각한다. 예를들어 졸린 몸을 이끌고 회사에 출근했을때 나는 “졸리다”라고 말하고 “집 침대에 눕고 싶다.”라고 생각한다. 하지만 나의 행동은 출근 후 오전 회의를 준비하고 있다. 이 것은 행복하다고 할 수 없다. 3가지가 통일되지 않았기 때문이다.\n이번에는 행복한 예를 들어보자 나는 게임을 할때 행복하다고 느끼고 실재로 그렇게 말하며 진짜 게임을 할때 행복함을 느낀다. 이것은 3가지가 통일되어 있기 때문이다.\n이 공식은 대부분의 상황에서 적용되었던 것 같다. 홍길동도 형이라고 생각하고 실제로 동생으로써 행동했으나 형이라 말하지 못했다. 그 때문에 적어도 그 집안에서는 불행했다.</p>\n<h2 id=\"말을-먼저-바꿔라\" style=\"position:relative;\"><a href=\"#%EB%A7%90%EC%9D%84-%EB%A8%BC%EC%A0%80-%EB%B0%94%EA%BF%94%EB%9D%BC\" aria-label=\"말을 먼저 바꿔라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>말을 먼저 바꿔라</h2>\n<p>말과 생각과 행동 중에서 바로 바꿀 수 있는게 무엇일까 바로 ‘말’이다. 말의 힘은 위대하다. 사람의 가치관 만들어질때 어떤 말을 듣고 자랐는지가 제일 중요하며 말을 하면 생각은 자연스럽게 따라오고 이제 행동이 일치할때 나는 행복해질 수 있게 된다.\n따라서 나는 나에게 도전적 이면서도 행복한 말을 할려고 노력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">나는 잘 하고 있고 잘 될거다.\n이거 누가 해, 내가 하지</code></pre></div>\n<p>이렇게 도전적으로 아무렇지 않은듯이 말하거나 아래와 같이 단기목표지향적으로 말하기도 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">출근해서 아아에 쿠키하나 때려야지\n오늘 업무 어떤 부분은 다 마무리 해야지</code></pre></div>\n<p>이렇게 소리내어 말을 하면 정말로 그렇다고 생각하고 내가 행동을 실재로 했을때 나는 소소하지만 행복함을 느낄 수 있다. 어렸을때 사람들이 마인드가 중요하다. 라고 말하고는 했는데 나의 행복을 중심으로 마인드를 가지면 정말로 행복할 수 있는 것 같다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>이처럼 말과 생각 그리고 행동을 일치시킬때 행복함을 느낄 수 있다. 그리고 그 중 가장먼저 바꿔야 할 것은 ‘말’이다. 하루를 시작하기 전에 나에게 행복한 말 그리고 행복해 질수 있는 말을 소리내어 말하고 하루를 시작해보자 내면의 소확행을 분명 얻을 수 있을거라고 생각한다.</p>","excerpt":"행복에 대해서 오늘은 내가 짧게나마 ‘행복’이란 무엇일까에 대해 고민한 내용을 공유할까 한다. 최근에 인문학을 공부하면서 나에게 적용하는 등 여러가지 생각을 하고 있다. 예전에 ‘불안’(아직 글은 안썼음)에 대해서 정의를 해봤는데 이제는 행복에 대해서도 깊게 생각해보고 싶어서 “최근에는 행복이란 무엇일까”에 대해서 고민을 해보았다. 나는 언제 행복할까 그렇다면 나는 언제 행복할까, 궁극적으로 행복에 대해서 정의하기 이전에 단순하게 나는 언제 행복한지에 대해 고민해봤다. 나는 아래와 같은 상황일때 행복을 느꼈던 것 같다. 하루를 다 마치고 친구들이랑 게임할때 평일에 늦잠잘때 사람 많이 없을때 맛집 가서 맛있는거 먹을때 분위기 좋은 카페가서 여유롭게 책을 읽을때 새로운  사람을 만나서 이야기를 공유할때 아주 평범하고 누구나 특별히 게임을 안좋아한다거나 하는게 아닌 이상 대부분 행복을 느낄 것이라고 생각한다. 때문에 일반화하고 정의하기가 막막했는데 내가 예전에 불안에 대해서 생각했던 것…","frontmatter":{"date":"January 10, 2024","title":"행복에 대해서 고민해 보았다.","categories":"Humanities","author":"최지혁","emoji":"🪽"},"fields":{"slug":"/Me/index1/"}},"next":null,"prev":{"id":"b69e39d6-05a6-5594-938f-c93a25fe0343","html":"<p>제목을 보면 이게 무슨 소리인가 싶을 수 있다. 나도 처음 듣고 띠요옹? 했었다.</p>\n<p>내가 알고 있는 MongoDB는 BASE(BA: <strong>B</strong>asically <strong>A</strong>valiable) 즉, 가용성과 성능을 중시한 분산 시스템의 특성을 가지고 있고 또한 이 점이 기존에 ACID 특성을 가진 RDBMS와의 차이점이라고 알고 있었다.</p>\n<p>더군다나 Mongo DB가 탄생하게 된 배경이 아래와 같은 고민 끝에 탄생한 것을 알았기에 더욱 의아했었다.</p>\n<blockquote>\n<p>대규모 데이터를 처리해야 하는데 RDBMS는 성장 한계가 있구나 <strong>일관성과 무결성을 버리고</strong><br>\n더 빠른 읽기 성능과 수평확장이 가능한 DB가 필요해!</p>\n</blockquote>\n<p>그럼 어쩌다 제목과 같이 눈이 크게 떠지는 질문을 스스로에서 던졌을까</p>\n<p>이번에 대규모 시스템 설계 기초 도서를 공부하면서 CAP이론이라는 것을 처음 접하며 이 의문이 시작되었다.</p>\n<h2 id=\"cap이론-이란\" style=\"position:relative;\"><a href=\"#cap%EC%9D%B4%EB%A1%A0-%EC%9D%B4%EB%9E%80\" aria-label=\"cap이론 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CAP이론 이란?</h2>\n<p>CAP 이론은 2000년에 에릭 브류어가 최초로 소개한 이론이며 어떤 분산 시스템이더라도 <strong>Consistency</strong> (일관성), <strong>Availability</strong> (가용성), <strong>Partition tolerance</strong> (분할 내성)를 <strong>모두 만족할 수 없다는 이론</strong>이다. 이 세 가지의 머리글자를 따서 CAP 이론이라고 부른다.</p>\n<ul>\n<li><strong>consistency</strong>: 분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계없이 언제나 같은 데이터를 보관해야 한다.</li>\n<li><strong>availability</strong>: 분산 시스템에 접속하는 클라이언트는 일부 노드에서 장애가 발생하더라도 항상 응답을 받을 수 있어야 한다.</li>\n<li><strong>partition</strong> <strong>tolerance</strong>: 파티션은 두 노드 사이에 통신 장애가 발생하였음을 의미한다. 파티션 감내는 네트워크에 파티션이 생기더라도 시스템은 계속해서 동작하여야 한다는 것을 의미한다.</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/ragi/post/b733e648-935c-41d5-8ca7-818da0c7be4f/image.png\" alt=\"CAP이론\"></p>\n<p>즉 모두 만족할 수 없기에 CA, CP, AP로 구분되는데 P 즉 파티션 감내를 보장하기 위해서는 네트워크 장애가 절대 발생하면 안 된다는 가정이 필요하다. 그러나 <strong>통상 네트워크 장애는 피할 수 없다.</strong> 때문에 분산 시스템은 반드시 파티션 문제를 감내할 수 있도록 설계해야 하므로 실세계에서 <strong>CA시스템은 존재하지 않는다</strong>.</p>\n<p>즉, 저장소는 아래 요구사항 가운데 어느 것을 만족하냐에 따라 분류할 수 있다.</p>\n<ul>\n<li><strong>CP 시스템</strong>: 일관성, 파티션 감내를 지원, 가용성을 조금 포기한다.</li>\n<li><strong>AP 시스템</strong>: 가용성과 파티션 감내를 지원, 일관성을 조금 포기한다.</li>\n</ul>\n<p>그렇다면 가용성과 일관성 사이에서 Trade off를 해야 하기에 우리는 선택을 해야 한다.</p>\n<p>그렇게 문득 어떤 DB들은 어떤 요구사항을 따를까 궁금해져서 서칭을 시작했다.</p>\n<h2 id=\"mongo-db는-cp를-따른다\" style=\"position:relative;\"><a href=\"#mongo-db%EB%8A%94-cp%EB%A5%BC-%EB%94%B0%EB%A5%B8%EB%8B%A4\" aria-label=\"mongo db는 cp를 따른다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mongo DB는 CP를 따른다.</h2>\n<p>이 부분이 본격적으로 내가 의문을 갖게 된 시점이다. “mongoDB는 의심의 여지없이 AP일 것이라고 생각했거늘” 소리가 육성으로 나왔다. 물론 CP, AP 둘 중 하나에 쏠린 시스템은 좋지 않다. 그렇기에 대부분의 분산 시스템은 상황에 따라 일관성과 가용성의 우선순위를 다르게 설정한다. 그렇더라도 mongoDB의 특성이나 다양한 배경을 봤을 때 기본적으로 AP일 것이라고 생각했다. </p>\n<h2 id=\"pacelc-이론\" style=\"position:relative;\"><a href=\"#pacelc-%EC%9D%B4%EB%A1%A0\" aria-label=\"pacelc 이론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PACELC 이론</h2>\n<p>역시 세상에는 똑똑하신 분이 많다. CAP이론에는 내가 가진 의문과 같은 한계가 있기에 그 <strong>한계를 보완하고자 나온 PACELC이라는 이론이 있다</strong>고 한다.</p>\n<p>PACELC이론은 현실에서는 Partition 상황과 아닌(ELSE) 상황이 함께 존재한다고 가정하고, 2가지 상황을 나눠 각각 어떤 gaurantee를 선택할지 나누어 놓은 것이다.</p>\n<p>처음 소개했던 두 가지 상황에  Partition 상황인지 아닌지를 나누어 한번 더 요구사항을 분할한다.</p>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcgiBVh%2FbtrmifvDEA1%2F0b7dpdNyBuaBteXxb44zuk%2Fimg.png\" alt=\"\"></p>\n<p>즉 구분을 다음과 같이 4가지로 나눌 수 있다.</p>\n<ul>\n<li>PA/EL 시스템: partition 상황에서는 가용성이 중요하고 <strong>일반적인 상황에서는 속도가 우선인 시스템</strong></li>\n<li>PA/EC 시스템: partition 상황에서는 가용성이 중요하고 <strong>일반적인 상황에서는 일관성이 우선인 시스템</strong></li>\n<li>PC/EL 시스템: partition이든 그 외든 <strong>일관성이 가장 중요한 시스템</strong></li>\n<li>PC/EC 시스템: partition 상황에서는 일관성을 중요하게 생각하고 그 외는 <strong>속도가 우선인 시스템</strong></li>\n</ul>\n<h2 id=\"mongodb는-paec를-따른다\" style=\"position:relative;\"><a href=\"#mongodb%EB%8A%94-paec%EB%A5%BC-%EB%94%B0%EB%A5%B8%EB%8B%A4\" aria-label=\"mongodb는 paec를 따른다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MongoDB는 PA/EC를 따른다.</h2>\n<p><img src=\"https://itwiki.kr/images/1/11/PACELC_%EB%B6%84%EB%A5%98.png\" alt=\"\"></p>\n<p>즉, 나는 분산환경에서 당연히 partition이 나누어져 있는 상황에서 MongoDB를 사용한다고 생각하여 일관성을 우선시한다는 말에 공감을 하지 못했던 것이다. 하지만 언제까지나 일반적인 상황에서는 <strong>일관성을 우선시하는 시스템</strong>이고 <strong>분산 환경에서는 가용성을 우선시한다.</strong></p>\n<p>그렇다면 분산 상황에서는 일관성을 보장하지 않는가 하면 또 그런 것도 아니다. Mongo DB는 Replica Set을 이용하여 클러스터를 구축한다. 이때, replication의 데이터 싱크가 비동기적으로 이루어지기 때문에 secondary에 복제되지 않은 데이터가 손실될 수 있다. 하지만 MongoDB는 <a href=\"https://mangkyu.tistory.com/53\">MVCC</a>(다중 버전 동시성 제어)라는 기법을 제공해 일관성도 수준급으로 보장한다. </p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>이렇듯 MongoDB는 CP다 일반적으로는 일관성을 중시하기 때문이다. 하지만 분산 환경에서는 AP다. partition 분할 시 가용성을 우선시하기 때문이다. 이렇게 좀 더 내용적으로 공부를 하고 나서야 의문이 풀렸다. 혹시라도 대규모 시스템 설계 기초 도서를 읽으며 나와 같은 의문을 가진 분께 조금이라도 도움이 되었으면 하는 마음이다.:)</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#cap%EC%9D%B4%EB%A1%A0-%EC%9D%B4%EB%9E%80\">CAP이론 이란?</a></li>\n<li><a href=\"#mongo-db%EB%8A%94-cp%EB%A5%BC-%EB%94%B0%EB%A5%B8%EB%8B%A4\">Mongo DB는 CP를 따른다.</a></li>\n<li><a href=\"#pacelc-%EC%9D%B4%EB%A1%A0\">PACELC 이론</a></li>\n<li><a href=\"#mongodb%EB%8A%94-paec%EB%A5%BC-%EB%94%B0%EB%A5%B8%EB%8B%A4\">MongoDB는 PA/EC를 따른다.</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 18, 2024","title":"뭐? Mongo DB가 가용성을 보장하지 않는다고?","categories":"Data_Engineering","author":"최지혁","emoji":"😮"},"fields":{"slug":"/Data Engineering/index1/"}},"site":{"siteMetadata":{"siteUrl":"https://statisticsfox.github.io","comments":{"utterances":{"repo":"StatisticsFox/blog-comments"}}}}},"pageContext":{"slug":"/Me/index1/","nextSlug":"","prevSlug":"/Data Engineering/index1/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}