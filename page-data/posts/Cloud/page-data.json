{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Cloud","result":{"pageContext":{"currentCategory":"Cloud","categories":["All","Data_Engineering","기타","Cloud","ERROR"],"edges":[{"node":{"id":"d65508b6-6427-511e-9cb6-6ddb7e63e3ab","excerpt":"들어가기에 앞서 최근에 BOAZ 동아리에서 Oauto2와 goole calender를 이용해서 웹 서비스를 만드는 프로젝트를 진행하는데(계획에 전혀없던 리액트까지 써보는중🥲) 전반적인 인프라 구성을 내가 맡았다. 이때, 도메인을 AWS EC2에 등록하는 과정에서 로드밸런서를 사용하게 되었다. ALB 로드 밸런서에 SSL 인증을 적용하면 각 Ec2 인스턴스 마다 SSL을 처리하지 않아도 HTTPS 트래픽을 처리할 수 있기에 반드시 필요한 부분이었다. 그 과정에서 로드 밸런서를 단순히 “그냥 부하분산 아님?”으로 알고 있던 나에게 개념정리가 꼭 필요한 부분이라 이번 글을 작성하게 되었다. 그럼 시작해보자\n시작해보자 Core 기본적으로 로드밸런서는 Scale out에서 사용된다. 서비스는 성장하는데 늘어나는 트래픽을 서버가 감당할 수 없을때 서버를 증설하는데 이 과정에서 각 서버에 걸리는 부하를 고르게 나누기 위해서는 로드밸런싱이 필수적으로 동반되어야 한다. 즉 다양한 곳에서 들어오는 …","fields":{"slug":"/Cloud/Loadbalancer/"},"frontmatter":{"categories":"Data_Engineering Cloud","title":"Load Balancer란? Feat. AWS","date":"September 08, 2024"}},"next":{"fields":{"slug":"/Data Engineering/nginx로 Spark, Yarn, kafkaui 구성하기/"}},"previous":{"fields":{"slug":"/Data Engineering/글또 10기를 들어가며/"}}},{"node":{"id":"04b54a36-7686-58d7-8470-3e8c40d92d0f","excerpt":"들어가기에 앞서 이번에 AWS EC2를 이용해 NAT instance를 활용해 kafka broker를 구축했다. 이제 producer를 실행하면 자연스럽게 카프카를 사용할 수 있다.(리소스 비용 이슈로 프로듀서 서버를 따로 분리하지 않았다.ㅎㅎ) 다만 producer는 아직 본격적으로 개발한 상태가 아닐뿐더러 나중에 대시보드를 배포할 때 producer를 지속적으로 수정해야 한다. 때문에 계속해서 TEST를 해야 하는데 그 과정이 여간 불편한게 아니다. 매번 Ec2 키고 접속해서 주키퍼랑 카프카 올리고… 아무튼 생각보다 노력을 필요로 한다. 또 Github와 같이 producer의 버전을 관리하고 다른 사람들에게 공유도 용이하게 하기 위해서는 응당 구축해야할 것이 있다. 그것이 바로.. CI/CD다!! Devops의 기본 소양이자 DE라면 당연히 알아야 하는 CI/CD를 구현해보기로 했다. 다행히도 학교에서 젠킨스를 이용한 CI/CD 구현 수업을 들었기에 개념 정도는 꿰고 있었다…","fields":{"slug":"/Data Engineering/Github Actions CI + CodeDeploy로 CICD 구햔하기/"},"frontmatter":{"categories":"Data_Engineering Cloud","title":"Implementing CI/CD with Github Actions CI + AWS CodeDeploy","date":"May 31, 2024"}},"next":{"fields":{"slug":"/Data Engineering/Ddareungi real-time Dashboard architecture/"}},"previous":{"fields":{"slug":"/Data Engineering/ETL의 T(transform)를 위한 Spark-Streaming 코드 작성하기/"}}},{"node":{"id":"a072a1f4-cdc0-5328-a338-4ba99b967d9e","excerpt":"AWS - jammy InRelease & 101: Network is unreachable jammy InRelease 오류 카프카 브로커 Ubuntu 서버에 java를 설치하려고 하는데 아래와 같은 문구가 뜨면서 동작이 되지 않았다. 무슨 jammy가 inrelease된 것 같은데 재미 하나도 없고 머리 아프다 다행히도 해당 에러에 대해서는 AWS측에서 답변 달아준 부분 있다.\n 공식 해결 방법 대충 해석을 보면 아래의 포인트들을 다시 체크해봐라 같은데 해석해보면 다음과 같다. 현재 EC2가 제대로 작동하는 다른 EC2들과 동일한 VPC 및 서브넷에 배포되었는가? 그게 아니라면 VPC가 인터넷 게이트웨이로 인터넷에 접근이 허용되어 있는가? 서브넷이 public이라면 인터넷 바운드 트레픽을 인터넷 게이트 웨이로 라우팅하는 라우팅 테이블이 있는가? 서브넷이 private이라면 인터넷 바운드 트래픽을 공용 서브넷의 NAT 게이트 위에이로 라우팅하는 라우팅 테이블이 있는가? 체크리스트…","fields":{"slug":"/error/"},"frontmatter":{"categories":"ERROR Cloud","title":"AWS - jammy InRelease & 101 Network is unreachable 해결하기","date":"April 16, 2024"}},"next":{"fields":{"slug":"/Cloud/"}},"previous":{"fields":{"slug":"/Data Engineering/kafka/"}}},{"node":{"id":"ad2b72e4-7395-5707-be63-0e9e2ee54d97","excerpt":"NAT 인프라 이번에 실시간 따릉이 대시보드 제작 프로젝트에 데이터 엔지니어 및 인프라로 참여하게 되었다.\n협업 및 배포의 용이성 때문에 클라우드를 이용하기로 결정이 났고 AWS에 EC2에 카프카 클러스터를 구축하고 프로듀서를 개발하기로 하였다.  AWS를 이용한 협업은 처음이기에 세세하게 사전조사를 했는데 첫째로 알게 된 사실은 AWS에서 네트워크를 설계할때 NAT의 사용은 필수적이라는 것이다.  보안상 카프카 클러스터 서버들을 외부에서 접근할 수 없게 해야하기 때문이다.  때문에 VPC 인프라를 구축할때 Public 서브넷과 Private 서브넷을 만들어 그안에 EC2 인스턴스를 두고, Bastion Host를 통해 Public 서브넷에서 Priavate 서브넷으로 접속한 후, NAT Gateway를 통해서 외부 인터넷 소스를 사설망에서 받는 식으로 운용된다.  그만큼 중요한 것으로 당연히 AWS에도 관련 서비스인 NAT Gateway가 존재하고 그것을 이용해서 손쉽게 사설망 …","fields":{"slug":"/Cloud/"},"frontmatter":{"categories":"Cloud","title":"AWS NAT instance를 활용한 비용절약","date":"April 14, 2024"}},"next":{"fields":{"slug":"/Data Engineering/DataOptimizations/"}},"previous":{"fields":{"slug":"/error/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}